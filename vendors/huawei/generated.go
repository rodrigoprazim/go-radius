// Code generated by radius-dict-gen. DO NOT EDIT.

package huawei

import (
	"net"
	"strconv"

	"github.com/rodrigoprazim/go-radius"
	"github.com/rodrigoprazim/go-radius/rfc2865"
)

const (
	_Huawei_VendorID = 2011
)

func _Huawei_AddVendor(p *radius.Packet, typ byte, attr radius.Attribute) (err error) {
	var vsa radius.Attribute
	vendor := make(radius.Attribute, 2+len(attr))
	vendor[0] = typ
	vendor[1] = byte(len(vendor))
	copy(vendor[2:], attr)
	vsa, err = radius.NewVendorSpecific(_Huawei_VendorID, vendor)
	if err != nil {
		return
	}
	p.Add(rfc2865.VendorSpecific_Type, vsa)
	return
}

func _Huawei_GetsVendor(p *radius.Packet, typ byte) (values []radius.Attribute) {
	for _, avp := range p.Attributes {
		if avp.Type != rfc2865.VendorSpecific_Type {
			continue
		}
		attr := avp.Attribute
		vendorID, vsa, err := radius.VendorSpecific(attr)
		if err != nil || vendorID != _Huawei_VendorID {
			continue
		}
		for len(vsa) >= 3 {
			vsaTyp, vsaLen := vsa[0], vsa[1]
			if int(vsaLen) > len(vsa) || vsaLen < 3 {
				break
			}
			if vsaTyp == typ {
				values = append(values, vsa[2:int(vsaLen)])
			}
			vsa = vsa[int(vsaLen):]
		}
	}
	return
}

func _Huawei_LookupVendor(p *radius.Packet, typ byte) (attr radius.Attribute, ok bool) {
	for _, avp := range p.Attributes {
		if avp.Type != rfc2865.VendorSpecific_Type {
			continue
		}
		attr := avp.Attribute
		vendorID, vsa, err := radius.VendorSpecific(attr)
		if err != nil || vendorID != _Huawei_VendorID {
			continue
		}
		for len(vsa) >= 3 {
			vsaTyp, vsaLen := vsa[0], vsa[1]
			if int(vsaLen) > len(vsa) || vsaLen < 3 {
				break
			}
			if vsaTyp == typ {
				return vsa[2:int(vsaLen)], true
			}
			vsa = vsa[int(vsaLen):]
		}
	}
	return
}

func _Huawei_SetVendor(p *radius.Packet, typ byte, attr radius.Attribute) (err error) {
	for i := 0; i < len(p.Attributes); {
		avp := p.Attributes[i]
		if avp.Type != rfc2865.VendorSpecific_Type {
			i++
			continue
		}
		vendorID, vsa, err := radius.VendorSpecific(avp.Attribute)
		if err != nil || vendorID != _Huawei_VendorID {
			i++
			continue
		}
		for j := 0; len(vsa[j:]) >= 3; {
			vsaTyp, vsaLen := vsa[0], vsa[1]
			if int(vsaLen) > len(vsa[j:]) || vsaLen < 3 {
				i++
				break
			}
			if vsaTyp == typ {
				vsa = append(vsa[:j], vsa[j+int(vsaLen):]...)
			}
			j += int(vsaLen)
		}
		if len(vsa) > 0 {
			copy(avp.Attribute[4:], vsa)
			i++
		} else {
			p.Attributes = append(p.Attributes[:i], p.Attributes[i+i:]...)
		}
	}
	return _Huawei_AddVendor(p, typ, attr)
}

func _Huawei_DelVendor(p *radius.Packet, typ byte) {
vsaLoop:
	for i := 0; i < len(p.Attributes); {
		avp := p.Attributes[i]
		if avp.Type != rfc2865.VendorSpecific_Type {
			i++
			continue
		}
		vendorID, vsa, err := radius.VendorSpecific(avp.Attribute)
		if err != nil || vendorID != _Huawei_VendorID {
			i++
			continue
		}
		offset := 0
		for len(vsa[offset:]) >= 3 {
			vsaTyp, vsaLen := vsa[offset], vsa[offset+1]
			if int(vsaLen) > len(vsa) || vsaLen < 3 {
				continue vsaLoop
			}
			if vsaTyp == typ {
				copy(vsa[offset:], vsa[offset+int(vsaLen):])
				vsa = vsa[:len(vsa)-int(vsaLen)]
			} else {
				offset += int(vsaLen)
			}
		}
		if offset == 0 {
			p.Attributes = append(p.Attributes[:i], p.Attributes[i+1:]...)
		} else {
			i++
		}
	}
	return
}

type HWInputBurstSize uint32

var HWInputBurstSize_Strings = map[HWInputBurstSize]string{}

func (a HWInputBurstSize) String() string {
	if str, ok := HWInputBurstSize_Strings[a]; ok {
		return str
	}
	return "HWInputBurstSize(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func HWInputBurstSize_Add(p *radius.Packet, value HWInputBurstSize) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Huawei_AddVendor(p, 1, a)
}

func HWInputBurstSize_Get(p *radius.Packet) (value HWInputBurstSize) {
	value, _ = HWInputBurstSize_Lookup(p)
	return
}

func HWInputBurstSize_Gets(p *radius.Packet) (values []HWInputBurstSize, err error) {
	var i uint32
	for _, attr := range _Huawei_GetsVendor(p, 1) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, HWInputBurstSize(i))
	}
	return
}

func HWInputBurstSize_Lookup(p *radius.Packet) (value HWInputBurstSize, err error) {
	a, ok := _Huawei_LookupVendor(p, 1)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = HWInputBurstSize(i)
	return
}

func HWInputBurstSize_Set(p *radius.Packet, value HWInputBurstSize) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Huawei_SetVendor(p, 1, a)
}

func HWInputBurstSize_Del(p *radius.Packet) {
	_Huawei_DelVendor(p, 1)
}

type HWInputAverageRate uint32

var HWInputAverageRate_Strings = map[HWInputAverageRate]string{}

func (a HWInputAverageRate) String() string {
	if str, ok := HWInputAverageRate_Strings[a]; ok {
		return str
	}
	return "HWInputAverageRate(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func HWInputAverageRate_Add(p *radius.Packet, value HWInputAverageRate) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Huawei_AddVendor(p, 2, a)
}

func HWInputAverageRate_Get(p *radius.Packet) (value HWInputAverageRate) {
	value, _ = HWInputAverageRate_Lookup(p)
	return
}

func HWInputAverageRate_Gets(p *radius.Packet) (values []HWInputAverageRate, err error) {
	var i uint32
	for _, attr := range _Huawei_GetsVendor(p, 2) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, HWInputAverageRate(i))
	}
	return
}

func HWInputAverageRate_Lookup(p *radius.Packet) (value HWInputAverageRate, err error) {
	a, ok := _Huawei_LookupVendor(p, 2)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = HWInputAverageRate(i)
	return
}

func HWInputAverageRate_Set(p *radius.Packet, value HWInputAverageRate) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Huawei_SetVendor(p, 2, a)
}

func HWInputAverageRate_Del(p *radius.Packet) {
	_Huawei_DelVendor(p, 2)
}

type HWInputPeakRate uint32

var HWInputPeakRate_Strings = map[HWInputPeakRate]string{}

func (a HWInputPeakRate) String() string {
	if str, ok := HWInputPeakRate_Strings[a]; ok {
		return str
	}
	return "HWInputPeakRate(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func HWInputPeakRate_Add(p *radius.Packet, value HWInputPeakRate) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Huawei_AddVendor(p, 3, a)
}

func HWInputPeakRate_Get(p *radius.Packet) (value HWInputPeakRate) {
	value, _ = HWInputPeakRate_Lookup(p)
	return
}

func HWInputPeakRate_Gets(p *radius.Packet) (values []HWInputPeakRate, err error) {
	var i uint32
	for _, attr := range _Huawei_GetsVendor(p, 3) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, HWInputPeakRate(i))
	}
	return
}

func HWInputPeakRate_Lookup(p *radius.Packet) (value HWInputPeakRate, err error) {
	a, ok := _Huawei_LookupVendor(p, 3)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = HWInputPeakRate(i)
	return
}

func HWInputPeakRate_Set(p *radius.Packet, value HWInputPeakRate) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Huawei_SetVendor(p, 3, a)
}

func HWInputPeakRate_Del(p *radius.Packet) {
	_Huawei_DelVendor(p, 3)
}

type HWOutputBurstSize uint32

var HWOutputBurstSize_Strings = map[HWOutputBurstSize]string{}

func (a HWOutputBurstSize) String() string {
	if str, ok := HWOutputBurstSize_Strings[a]; ok {
		return str
	}
	return "HWOutputBurstSize(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func HWOutputBurstSize_Add(p *radius.Packet, value HWOutputBurstSize) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Huawei_AddVendor(p, 4, a)
}

func HWOutputBurstSize_Get(p *radius.Packet) (value HWOutputBurstSize) {
	value, _ = HWOutputBurstSize_Lookup(p)
	return
}

func HWOutputBurstSize_Gets(p *radius.Packet) (values []HWOutputBurstSize, err error) {
	var i uint32
	for _, attr := range _Huawei_GetsVendor(p, 4) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, HWOutputBurstSize(i))
	}
	return
}

func HWOutputBurstSize_Lookup(p *radius.Packet) (value HWOutputBurstSize, err error) {
	a, ok := _Huawei_LookupVendor(p, 4)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = HWOutputBurstSize(i)
	return
}

func HWOutputBurstSize_Set(p *radius.Packet, value HWOutputBurstSize) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Huawei_SetVendor(p, 4, a)
}

func HWOutputBurstSize_Del(p *radius.Packet) {
	_Huawei_DelVendor(p, 4)
}

type HWOutputAverageRate uint32

var HWOutputAverageRate_Strings = map[HWOutputAverageRate]string{}

func (a HWOutputAverageRate) String() string {
	if str, ok := HWOutputAverageRate_Strings[a]; ok {
		return str
	}
	return "HWOutputAverageRate(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func HWOutputAverageRate_Add(p *radius.Packet, value HWOutputAverageRate) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Huawei_AddVendor(p, 5, a)
}

func HWOutputAverageRate_Get(p *radius.Packet) (value HWOutputAverageRate) {
	value, _ = HWOutputAverageRate_Lookup(p)
	return
}

func HWOutputAverageRate_Gets(p *radius.Packet) (values []HWOutputAverageRate, err error) {
	var i uint32
	for _, attr := range _Huawei_GetsVendor(p, 5) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, HWOutputAverageRate(i))
	}
	return
}

func HWOutputAverageRate_Lookup(p *radius.Packet) (value HWOutputAverageRate, err error) {
	a, ok := _Huawei_LookupVendor(p, 5)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = HWOutputAverageRate(i)
	return
}

func HWOutputAverageRate_Set(p *radius.Packet, value HWOutputAverageRate) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Huawei_SetVendor(p, 5, a)
}

func HWOutputAverageRate_Del(p *radius.Packet) {
	_Huawei_DelVendor(p, 5)
}

type HWOutputPeakRate uint32

var HWOutputPeakRate_Strings = map[HWOutputPeakRate]string{}

func (a HWOutputPeakRate) String() string {
	if str, ok := HWOutputPeakRate_Strings[a]; ok {
		return str
	}
	return "HWOutputPeakRate(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func HWOutputPeakRate_Add(p *radius.Packet, value HWOutputPeakRate) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Huawei_AddVendor(p, 6, a)
}

func HWOutputPeakRate_Get(p *radius.Packet) (value HWOutputPeakRate) {
	value, _ = HWOutputPeakRate_Lookup(p)
	return
}

func HWOutputPeakRate_Gets(p *radius.Packet) (values []HWOutputPeakRate, err error) {
	var i uint32
	for _, attr := range _Huawei_GetsVendor(p, 6) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, HWOutputPeakRate(i))
	}
	return
}

func HWOutputPeakRate_Lookup(p *radius.Packet) (value HWOutputPeakRate, err error) {
	a, ok := _Huawei_LookupVendor(p, 6)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = HWOutputPeakRate(i)
	return
}

func HWOutputPeakRate_Set(p *radius.Packet, value HWOutputPeakRate) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Huawei_SetVendor(p, 6, a)
}

func HWOutputPeakRate_Del(p *radius.Packet) {
	_Huawei_DelVendor(p, 6)
}

type HWInKbBeforeTSwitch uint32

var HWInKbBeforeTSwitch_Strings = map[HWInKbBeforeTSwitch]string{}

func (a HWInKbBeforeTSwitch) String() string {
	if str, ok := HWInKbBeforeTSwitch_Strings[a]; ok {
		return str
	}
	return "HWInKbBeforeTSwitch(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func HWInKbBeforeTSwitch_Add(p *radius.Packet, value HWInKbBeforeTSwitch) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Huawei_AddVendor(p, 7, a)
}

func HWInKbBeforeTSwitch_Get(p *radius.Packet) (value HWInKbBeforeTSwitch) {
	value, _ = HWInKbBeforeTSwitch_Lookup(p)
	return
}

func HWInKbBeforeTSwitch_Gets(p *radius.Packet) (values []HWInKbBeforeTSwitch, err error) {
	var i uint32
	for _, attr := range _Huawei_GetsVendor(p, 7) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, HWInKbBeforeTSwitch(i))
	}
	return
}

func HWInKbBeforeTSwitch_Lookup(p *radius.Packet) (value HWInKbBeforeTSwitch, err error) {
	a, ok := _Huawei_LookupVendor(p, 7)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = HWInKbBeforeTSwitch(i)
	return
}

func HWInKbBeforeTSwitch_Set(p *radius.Packet, value HWInKbBeforeTSwitch) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Huawei_SetVendor(p, 7, a)
}

func HWInKbBeforeTSwitch_Del(p *radius.Packet) {
	_Huawei_DelVendor(p, 7)
}

type HWOutKbBeforeTSwitch uint32

var HWOutKbBeforeTSwitch_Strings = map[HWOutKbBeforeTSwitch]string{}

func (a HWOutKbBeforeTSwitch) String() string {
	if str, ok := HWOutKbBeforeTSwitch_Strings[a]; ok {
		return str
	}
	return "HWOutKbBeforeTSwitch(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func HWOutKbBeforeTSwitch_Add(p *radius.Packet, value HWOutKbBeforeTSwitch) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Huawei_AddVendor(p, 8, a)
}

func HWOutKbBeforeTSwitch_Get(p *radius.Packet) (value HWOutKbBeforeTSwitch) {
	value, _ = HWOutKbBeforeTSwitch_Lookup(p)
	return
}

func HWOutKbBeforeTSwitch_Gets(p *radius.Packet) (values []HWOutKbBeforeTSwitch, err error) {
	var i uint32
	for _, attr := range _Huawei_GetsVendor(p, 8) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, HWOutKbBeforeTSwitch(i))
	}
	return
}

func HWOutKbBeforeTSwitch_Lookup(p *radius.Packet) (value HWOutKbBeforeTSwitch, err error) {
	a, ok := _Huawei_LookupVendor(p, 8)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = HWOutKbBeforeTSwitch(i)
	return
}

func HWOutKbBeforeTSwitch_Set(p *radius.Packet, value HWOutKbBeforeTSwitch) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Huawei_SetVendor(p, 8, a)
}

func HWOutKbBeforeTSwitch_Del(p *radius.Packet) {
	_Huawei_DelVendor(p, 8)
}

type HWInPktBeforeTSwitch uint32

var HWInPktBeforeTSwitch_Strings = map[HWInPktBeforeTSwitch]string{}

func (a HWInPktBeforeTSwitch) String() string {
	if str, ok := HWInPktBeforeTSwitch_Strings[a]; ok {
		return str
	}
	return "HWInPktBeforeTSwitch(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func HWInPktBeforeTSwitch_Add(p *radius.Packet, value HWInPktBeforeTSwitch) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Huawei_AddVendor(p, 9, a)
}

func HWInPktBeforeTSwitch_Get(p *radius.Packet) (value HWInPktBeforeTSwitch) {
	value, _ = HWInPktBeforeTSwitch_Lookup(p)
	return
}

func HWInPktBeforeTSwitch_Gets(p *radius.Packet) (values []HWInPktBeforeTSwitch, err error) {
	var i uint32
	for _, attr := range _Huawei_GetsVendor(p, 9) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, HWInPktBeforeTSwitch(i))
	}
	return
}

func HWInPktBeforeTSwitch_Lookup(p *radius.Packet) (value HWInPktBeforeTSwitch, err error) {
	a, ok := _Huawei_LookupVendor(p, 9)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = HWInPktBeforeTSwitch(i)
	return
}

func HWInPktBeforeTSwitch_Set(p *radius.Packet, value HWInPktBeforeTSwitch) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Huawei_SetVendor(p, 9, a)
}

func HWInPktBeforeTSwitch_Del(p *radius.Packet) {
	_Huawei_DelVendor(p, 9)
}

type HWOutPktBeforeTSwitch uint32

var HWOutPktBeforeTSwitch_Strings = map[HWOutPktBeforeTSwitch]string{}

func (a HWOutPktBeforeTSwitch) String() string {
	if str, ok := HWOutPktBeforeTSwitch_Strings[a]; ok {
		return str
	}
	return "HWOutPktBeforeTSwitch(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func HWOutPktBeforeTSwitch_Add(p *radius.Packet, value HWOutPktBeforeTSwitch) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Huawei_AddVendor(p, 10, a)
}

func HWOutPktBeforeTSwitch_Get(p *radius.Packet) (value HWOutPktBeforeTSwitch) {
	value, _ = HWOutPktBeforeTSwitch_Lookup(p)
	return
}

func HWOutPktBeforeTSwitch_Gets(p *radius.Packet) (values []HWOutPktBeforeTSwitch, err error) {
	var i uint32
	for _, attr := range _Huawei_GetsVendor(p, 10) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, HWOutPktBeforeTSwitch(i))
	}
	return
}

func HWOutPktBeforeTSwitch_Lookup(p *radius.Packet) (value HWOutPktBeforeTSwitch, err error) {
	a, ok := _Huawei_LookupVendor(p, 10)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = HWOutPktBeforeTSwitch(i)
	return
}

func HWOutPktBeforeTSwitch_Set(p *radius.Packet, value HWOutPktBeforeTSwitch) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Huawei_SetVendor(p, 10, a)
}

func HWOutPktBeforeTSwitch_Del(p *radius.Packet) {
	_Huawei_DelVendor(p, 10)
}

type HWInKbAfterTSwitch uint32

var HWInKbAfterTSwitch_Strings = map[HWInKbAfterTSwitch]string{}

func (a HWInKbAfterTSwitch) String() string {
	if str, ok := HWInKbAfterTSwitch_Strings[a]; ok {
		return str
	}
	return "HWInKbAfterTSwitch(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func HWInKbAfterTSwitch_Add(p *radius.Packet, value HWInKbAfterTSwitch) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Huawei_AddVendor(p, 11, a)
}

func HWInKbAfterTSwitch_Get(p *radius.Packet) (value HWInKbAfterTSwitch) {
	value, _ = HWInKbAfterTSwitch_Lookup(p)
	return
}

func HWInKbAfterTSwitch_Gets(p *radius.Packet) (values []HWInKbAfterTSwitch, err error) {
	var i uint32
	for _, attr := range _Huawei_GetsVendor(p, 11) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, HWInKbAfterTSwitch(i))
	}
	return
}

func HWInKbAfterTSwitch_Lookup(p *radius.Packet) (value HWInKbAfterTSwitch, err error) {
	a, ok := _Huawei_LookupVendor(p, 11)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = HWInKbAfterTSwitch(i)
	return
}

func HWInKbAfterTSwitch_Set(p *radius.Packet, value HWInKbAfterTSwitch) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Huawei_SetVendor(p, 11, a)
}

func HWInKbAfterTSwitch_Del(p *radius.Packet) {
	_Huawei_DelVendor(p, 11)
}

type HWOutKbAfterTSwitch uint32

var HWOutKbAfterTSwitch_Strings = map[HWOutKbAfterTSwitch]string{}

func (a HWOutKbAfterTSwitch) String() string {
	if str, ok := HWOutKbAfterTSwitch_Strings[a]; ok {
		return str
	}
	return "HWOutKbAfterTSwitch(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func HWOutKbAfterTSwitch_Add(p *radius.Packet, value HWOutKbAfterTSwitch) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Huawei_AddVendor(p, 12, a)
}

func HWOutKbAfterTSwitch_Get(p *radius.Packet) (value HWOutKbAfterTSwitch) {
	value, _ = HWOutKbAfterTSwitch_Lookup(p)
	return
}

func HWOutKbAfterTSwitch_Gets(p *radius.Packet) (values []HWOutKbAfterTSwitch, err error) {
	var i uint32
	for _, attr := range _Huawei_GetsVendor(p, 12) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, HWOutKbAfterTSwitch(i))
	}
	return
}

func HWOutKbAfterTSwitch_Lookup(p *radius.Packet) (value HWOutKbAfterTSwitch, err error) {
	a, ok := _Huawei_LookupVendor(p, 12)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = HWOutKbAfterTSwitch(i)
	return
}

func HWOutKbAfterTSwitch_Set(p *radius.Packet, value HWOutKbAfterTSwitch) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Huawei_SetVendor(p, 12, a)
}

func HWOutKbAfterTSwitch_Del(p *radius.Packet) {
	_Huawei_DelVendor(p, 12)
}

type HWInPktAfterTSwitch uint32

var HWInPktAfterTSwitch_Strings = map[HWInPktAfterTSwitch]string{}

func (a HWInPktAfterTSwitch) String() string {
	if str, ok := HWInPktAfterTSwitch_Strings[a]; ok {
		return str
	}
	return "HWInPktAfterTSwitch(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func HWInPktAfterTSwitch_Add(p *radius.Packet, value HWInPktAfterTSwitch) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Huawei_AddVendor(p, 13, a)
}

func HWInPktAfterTSwitch_Get(p *radius.Packet) (value HWInPktAfterTSwitch) {
	value, _ = HWInPktAfterTSwitch_Lookup(p)
	return
}

func HWInPktAfterTSwitch_Gets(p *radius.Packet) (values []HWInPktAfterTSwitch, err error) {
	var i uint32
	for _, attr := range _Huawei_GetsVendor(p, 13) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, HWInPktAfterTSwitch(i))
	}
	return
}

func HWInPktAfterTSwitch_Lookup(p *radius.Packet) (value HWInPktAfterTSwitch, err error) {
	a, ok := _Huawei_LookupVendor(p, 13)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = HWInPktAfterTSwitch(i)
	return
}

func HWInPktAfterTSwitch_Set(p *radius.Packet, value HWInPktAfterTSwitch) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Huawei_SetVendor(p, 13, a)
}

func HWInPktAfterTSwitch_Del(p *radius.Packet) {
	_Huawei_DelVendor(p, 13)
}

type HWOutPktAfterTSwitch uint32

var HWOutPktAfterTSwitch_Strings = map[HWOutPktAfterTSwitch]string{}

func (a HWOutPktAfterTSwitch) String() string {
	if str, ok := HWOutPktAfterTSwitch_Strings[a]; ok {
		return str
	}
	return "HWOutPktAfterTSwitch(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func HWOutPktAfterTSwitch_Add(p *radius.Packet, value HWOutPktAfterTSwitch) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Huawei_AddVendor(p, 14, a)
}

func HWOutPktAfterTSwitch_Get(p *radius.Packet) (value HWOutPktAfterTSwitch) {
	value, _ = HWOutPktAfterTSwitch_Lookup(p)
	return
}

func HWOutPktAfterTSwitch_Gets(p *radius.Packet) (values []HWOutPktAfterTSwitch, err error) {
	var i uint32
	for _, attr := range _Huawei_GetsVendor(p, 14) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, HWOutPktAfterTSwitch(i))
	}
	return
}

func HWOutPktAfterTSwitch_Lookup(p *radius.Packet) (value HWOutPktAfterTSwitch, err error) {
	a, ok := _Huawei_LookupVendor(p, 14)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = HWOutPktAfterTSwitch(i)
	return
}

func HWOutPktAfterTSwitch_Set(p *radius.Packet, value HWOutPktAfterTSwitch) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Huawei_SetVendor(p, 14, a)
}

func HWOutPktAfterTSwitch_Del(p *radius.Packet) {
	_Huawei_DelVendor(p, 14)
}

type HWRemanentVolume uint32

var HWRemanentVolume_Strings = map[HWRemanentVolume]string{}

func (a HWRemanentVolume) String() string {
	if str, ok := HWRemanentVolume_Strings[a]; ok {
		return str
	}
	return "HWRemanentVolume(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func HWRemanentVolume_Add(p *radius.Packet, value HWRemanentVolume) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Huawei_AddVendor(p, 15, a)
}

func HWRemanentVolume_Get(p *radius.Packet) (value HWRemanentVolume) {
	value, _ = HWRemanentVolume_Lookup(p)
	return
}

func HWRemanentVolume_Gets(p *radius.Packet) (values []HWRemanentVolume, err error) {
	var i uint32
	for _, attr := range _Huawei_GetsVendor(p, 15) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, HWRemanentVolume(i))
	}
	return
}

func HWRemanentVolume_Lookup(p *radius.Packet) (value HWRemanentVolume, err error) {
	a, ok := _Huawei_LookupVendor(p, 15)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = HWRemanentVolume(i)
	return
}

func HWRemanentVolume_Set(p *radius.Packet, value HWRemanentVolume) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Huawei_SetVendor(p, 15, a)
}

func HWRemanentVolume_Del(p *radius.Packet) {
	_Huawei_DelVendor(p, 15)
}

type HWTariffSwitchInterval uint32

var HWTariffSwitchInterval_Strings = map[HWTariffSwitchInterval]string{}

func (a HWTariffSwitchInterval) String() string {
	if str, ok := HWTariffSwitchInterval_Strings[a]; ok {
		return str
	}
	return "HWTariffSwitchInterval(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func HWTariffSwitchInterval_Add(p *radius.Packet, value HWTariffSwitchInterval) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Huawei_AddVendor(p, 16, a)
}

func HWTariffSwitchInterval_Get(p *radius.Packet) (value HWTariffSwitchInterval) {
	value, _ = HWTariffSwitchInterval_Lookup(p)
	return
}

func HWTariffSwitchInterval_Gets(p *radius.Packet) (values []HWTariffSwitchInterval, err error) {
	var i uint32
	for _, attr := range _Huawei_GetsVendor(p, 16) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, HWTariffSwitchInterval(i))
	}
	return
}

func HWTariffSwitchInterval_Lookup(p *radius.Packet) (value HWTariffSwitchInterval, err error) {
	a, ok := _Huawei_LookupVendor(p, 16)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = HWTariffSwitchInterval(i)
	return
}

func HWTariffSwitchInterval_Set(p *radius.Packet, value HWTariffSwitchInterval) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Huawei_SetVendor(p, 16, a)
}

func HWTariffSwitchInterval_Del(p *radius.Packet) {
	_Huawei_DelVendor(p, 16)
}

func HWISPID_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Huawei_AddVendor(p, 17, a)
}

func HWISPID_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Huawei_AddVendor(p, 17, a)
}

func HWISPID_Get(p *radius.Packet) (value []byte) {
	value, _ = HWISPID_Lookup(p)
	return
}

func HWISPID_GetString(p *radius.Packet) (value string) {
	value, _ = HWISPID_LookupString(p)
	return
}

func HWISPID_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Huawei_GetsVendor(p, 17) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func HWISPID_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Huawei_GetsVendor(p, 17) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func HWISPID_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Huawei_LookupVendor(p, 17)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func HWISPID_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Huawei_LookupVendor(p, 17)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func HWISPID_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Huawei_SetVendor(p, 17, a)
}

func HWISPID_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Huawei_SetVendor(p, 17, a)
}

func HWISPID_Del(p *radius.Packet) {
	_Huawei_DelVendor(p, 17)
}

type HWMaxUsersPerLogicPort uint32

var HWMaxUsersPerLogicPort_Strings = map[HWMaxUsersPerLogicPort]string{}

func (a HWMaxUsersPerLogicPort) String() string {
	if str, ok := HWMaxUsersPerLogicPort_Strings[a]; ok {
		return str
	}
	return "HWMaxUsersPerLogicPort(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func HWMaxUsersPerLogicPort_Add(p *radius.Packet, value HWMaxUsersPerLogicPort) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Huawei_AddVendor(p, 18, a)
}

func HWMaxUsersPerLogicPort_Get(p *radius.Packet) (value HWMaxUsersPerLogicPort) {
	value, _ = HWMaxUsersPerLogicPort_Lookup(p)
	return
}

func HWMaxUsersPerLogicPort_Gets(p *radius.Packet) (values []HWMaxUsersPerLogicPort, err error) {
	var i uint32
	for _, attr := range _Huawei_GetsVendor(p, 18) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, HWMaxUsersPerLogicPort(i))
	}
	return
}

func HWMaxUsersPerLogicPort_Lookup(p *radius.Packet) (value HWMaxUsersPerLogicPort, err error) {
	a, ok := _Huawei_LookupVendor(p, 18)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = HWMaxUsersPerLogicPort(i)
	return
}

func HWMaxUsersPerLogicPort_Set(p *radius.Packet, value HWMaxUsersPerLogicPort) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Huawei_SetVendor(p, 18, a)
}

func HWMaxUsersPerLogicPort_Del(p *radius.Packet) {
	_Huawei_DelVendor(p, 18)
}

type HWCommand uint32

var HWCommand_Strings = map[HWCommand]string{}

func (a HWCommand) String() string {
	if str, ok := HWCommand_Strings[a]; ok {
		return str
	}
	return "HWCommand(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func HWCommand_Add(p *radius.Packet, value HWCommand) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Huawei_AddVendor(p, 20, a)
}

func HWCommand_Get(p *radius.Packet) (value HWCommand) {
	value, _ = HWCommand_Lookup(p)
	return
}

func HWCommand_Gets(p *radius.Packet) (values []HWCommand, err error) {
	var i uint32
	for _, attr := range _Huawei_GetsVendor(p, 20) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, HWCommand(i))
	}
	return
}

func HWCommand_Lookup(p *radius.Packet) (value HWCommand, err error) {
	a, ok := _Huawei_LookupVendor(p, 20)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = HWCommand(i)
	return
}

func HWCommand_Set(p *radius.Packet, value HWCommand) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Huawei_SetVendor(p, 20, a)
}

func HWCommand_Del(p *radius.Packet) {
	_Huawei_DelVendor(p, 20)
}

type HWPriority uint32

var HWPriority_Strings = map[HWPriority]string{}

func (a HWPriority) String() string {
	if str, ok := HWPriority_Strings[a]; ok {
		return str
	}
	return "HWPriority(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func HWPriority_Add(p *radius.Packet, value HWPriority) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Huawei_AddVendor(p, 22, a)
}

func HWPriority_Get(p *radius.Packet) (value HWPriority) {
	value, _ = HWPriority_Lookup(p)
	return
}

func HWPriority_Gets(p *radius.Packet) (values []HWPriority, err error) {
	var i uint32
	for _, attr := range _Huawei_GetsVendor(p, 22) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, HWPriority(i))
	}
	return
}

func HWPriority_Lookup(p *radius.Packet) (value HWPriority, err error) {
	a, ok := _Huawei_LookupVendor(p, 22)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = HWPriority(i)
	return
}

func HWPriority_Set(p *radius.Packet, value HWPriority) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Huawei_SetVendor(p, 22, a)
}

func HWPriority_Del(p *radius.Packet) {
	_Huawei_DelVendor(p, 22)
}

type HWControlIdentifier uint32

var HWControlIdentifier_Strings = map[HWControlIdentifier]string{}

func (a HWControlIdentifier) String() string {
	if str, ok := HWControlIdentifier_Strings[a]; ok {
		return str
	}
	return "HWControlIdentifier(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func HWControlIdentifier_Add(p *radius.Packet, value HWControlIdentifier) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Huawei_AddVendor(p, 24, a)
}

func HWControlIdentifier_Get(p *radius.Packet) (value HWControlIdentifier) {
	value, _ = HWControlIdentifier_Lookup(p)
	return
}

func HWControlIdentifier_Gets(p *radius.Packet) (values []HWControlIdentifier, err error) {
	var i uint32
	for _, attr := range _Huawei_GetsVendor(p, 24) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, HWControlIdentifier(i))
	}
	return
}

func HWControlIdentifier_Lookup(p *radius.Packet) (value HWControlIdentifier, err error) {
	a, ok := _Huawei_LookupVendor(p, 24)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = HWControlIdentifier(i)
	return
}

func HWControlIdentifier_Set(p *radius.Packet, value HWControlIdentifier) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Huawei_SetVendor(p, 24, a)
}

func HWControlIdentifier_Del(p *radius.Packet) {
	_Huawei_DelVendor(p, 24)
}

type HWResultCode uint32

const (
	HWResultCode_Value_Succeeded HWResultCode = 0
)

var HWResultCode_Strings = map[HWResultCode]string{
	HWResultCode_Value_Succeeded: "Succeeded",
}

func (a HWResultCode) String() string {
	if str, ok := HWResultCode_Strings[a]; ok {
		return str
	}
	return "HWResultCode(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func HWResultCode_Add(p *radius.Packet, value HWResultCode) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Huawei_AddVendor(p, 25, a)
}

func HWResultCode_Get(p *radius.Packet) (value HWResultCode) {
	value, _ = HWResultCode_Lookup(p)
	return
}

func HWResultCode_Gets(p *radius.Packet) (values []HWResultCode, err error) {
	var i uint32
	for _, attr := range _Huawei_GetsVendor(p, 25) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, HWResultCode(i))
	}
	return
}

func HWResultCode_Lookup(p *radius.Packet) (value HWResultCode, err error) {
	a, ok := _Huawei_LookupVendor(p, 25)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = HWResultCode(i)
	return
}

func HWResultCode_Set(p *radius.Packet, value HWResultCode) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Huawei_SetVendor(p, 25, a)
}

func HWResultCode_Del(p *radius.Packet) {
	_Huawei_DelVendor(p, 25)
}

type HWConnectID uint32

var HWConnectID_Strings = map[HWConnectID]string{}

func (a HWConnectID) String() string {
	if str, ok := HWConnectID_Strings[a]; ok {
		return str
	}
	return "HWConnectID(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func HWConnectID_Add(p *radius.Packet, value HWConnectID) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Huawei_AddVendor(p, 26, a)
}

func HWConnectID_Get(p *radius.Packet) (value HWConnectID) {
	value, _ = HWConnectID_Lookup(p)
	return
}

func HWConnectID_Gets(p *radius.Packet) (values []HWConnectID, err error) {
	var i uint32
	for _, attr := range _Huawei_GetsVendor(p, 26) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, HWConnectID(i))
	}
	return
}

func HWConnectID_Lookup(p *radius.Packet) (value HWConnectID, err error) {
	a, ok := _Huawei_LookupVendor(p, 26)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = HWConnectID(i)
	return
}

func HWConnectID_Set(p *radius.Packet, value HWConnectID) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Huawei_SetVendor(p, 26, a)
}

func HWConnectID_Del(p *radius.Packet) {
	_Huawei_DelVendor(p, 26)
}

func HWPortalURL_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Huawei_AddVendor(p, 27, a)
}

func HWPortalURL_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Huawei_AddVendor(p, 27, a)
}

func HWPortalURL_Get(p *radius.Packet) (value []byte) {
	value, _ = HWPortalURL_Lookup(p)
	return
}

func HWPortalURL_GetString(p *radius.Packet) (value string) {
	value, _ = HWPortalURL_LookupString(p)
	return
}

func HWPortalURL_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Huawei_GetsVendor(p, 27) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func HWPortalURL_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Huawei_GetsVendor(p, 27) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func HWPortalURL_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Huawei_LookupVendor(p, 27)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func HWPortalURL_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Huawei_LookupVendor(p, 27)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func HWPortalURL_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Huawei_SetVendor(p, 27, a)
}

func HWPortalURL_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Huawei_SetVendor(p, 27, a)
}

func HWPortalURL_Del(p *radius.Packet) {
	_Huawei_DelVendor(p, 27)
}

func HWFTPDirectory_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Huawei_AddVendor(p, 28, a)
}

func HWFTPDirectory_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Huawei_AddVendor(p, 28, a)
}

func HWFTPDirectory_Get(p *radius.Packet) (value []byte) {
	value, _ = HWFTPDirectory_Lookup(p)
	return
}

func HWFTPDirectory_GetString(p *radius.Packet) (value string) {
	value, _ = HWFTPDirectory_LookupString(p)
	return
}

func HWFTPDirectory_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Huawei_GetsVendor(p, 28) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func HWFTPDirectory_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Huawei_GetsVendor(p, 28) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func HWFTPDirectory_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Huawei_LookupVendor(p, 28)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func HWFTPDirectory_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Huawei_LookupVendor(p, 28)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func HWFTPDirectory_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Huawei_SetVendor(p, 28, a)
}

func HWFTPDirectory_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Huawei_SetVendor(p, 28, a)
}

func HWFTPDirectory_Del(p *radius.Packet) {
	_Huawei_DelVendor(p, 28)
}

type HWExecPrivilege uint32

var HWExecPrivilege_Strings = map[HWExecPrivilege]string{}

func (a HWExecPrivilege) String() string {
	if str, ok := HWExecPrivilege_Strings[a]; ok {
		return str
	}
	return "HWExecPrivilege(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func HWExecPrivilege_Add(p *radius.Packet, value HWExecPrivilege) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Huawei_AddVendor(p, 29, a)
}

func HWExecPrivilege_Get(p *radius.Packet) (value HWExecPrivilege) {
	value, _ = HWExecPrivilege_Lookup(p)
	return
}

func HWExecPrivilege_Gets(p *radius.Packet) (values []HWExecPrivilege, err error) {
	var i uint32
	for _, attr := range _Huawei_GetsVendor(p, 29) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, HWExecPrivilege(i))
	}
	return
}

func HWExecPrivilege_Lookup(p *radius.Packet) (value HWExecPrivilege, err error) {
	a, ok := _Huawei_LookupVendor(p, 29)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = HWExecPrivilege(i)
	return
}

func HWExecPrivilege_Set(p *radius.Packet, value HWExecPrivilege) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Huawei_SetVendor(p, 29, a)
}

func HWExecPrivilege_Del(p *radius.Packet) {
	_Huawei_DelVendor(p, 29)
}

type HWIPAddress uint32

var HWIPAddress_Strings = map[HWIPAddress]string{}

func (a HWIPAddress) String() string {
	if str, ok := HWIPAddress_Strings[a]; ok {
		return str
	}
	return "HWIPAddress(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func HWIPAddress_Add(p *radius.Packet, value HWIPAddress) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Huawei_AddVendor(p, 30, a)
}

func HWIPAddress_Get(p *radius.Packet) (value HWIPAddress) {
	value, _ = HWIPAddress_Lookup(p)
	return
}

func HWIPAddress_Gets(p *radius.Packet) (values []HWIPAddress, err error) {
	var i uint32
	for _, attr := range _Huawei_GetsVendor(p, 30) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, HWIPAddress(i))
	}
	return
}

func HWIPAddress_Lookup(p *radius.Packet) (value HWIPAddress, err error) {
	a, ok := _Huawei_LookupVendor(p, 30)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = HWIPAddress(i)
	return
}

func HWIPAddress_Set(p *radius.Packet, value HWIPAddress) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Huawei_SetVendor(p, 30, a)
}

func HWIPAddress_Del(p *radius.Packet) {
	_Huawei_DelVendor(p, 30)
}

func HWQosProfileName_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Huawei_AddVendor(p, 31, a)
}

func HWQosProfileName_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Huawei_AddVendor(p, 31, a)
}

func HWQosProfileName_Get(p *radius.Packet) (value []byte) {
	value, _ = HWQosProfileName_Lookup(p)
	return
}

func HWQosProfileName_GetString(p *radius.Packet) (value string) {
	value, _ = HWQosProfileName_LookupString(p)
	return
}

func HWQosProfileName_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Huawei_GetsVendor(p, 31) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func HWQosProfileName_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Huawei_GetsVendor(p, 31) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func HWQosProfileName_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Huawei_LookupVendor(p, 31)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func HWQosProfileName_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Huawei_LookupVendor(p, 31)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func HWQosProfileName_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Huawei_SetVendor(p, 31, a)
}

func HWQosProfileName_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Huawei_SetVendor(p, 31, a)
}

func HWQosProfileName_Del(p *radius.Packet) {
	_Huawei_DelVendor(p, 31)
}

func HWSIPServer_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Huawei_AddVendor(p, 32, a)
}

func HWSIPServer_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Huawei_AddVendor(p, 32, a)
}

func HWSIPServer_Get(p *radius.Packet) (value []byte) {
	value, _ = HWSIPServer_Lookup(p)
	return
}

func HWSIPServer_GetString(p *radius.Packet) (value string) {
	value, _ = HWSIPServer_LookupString(p)
	return
}

func HWSIPServer_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Huawei_GetsVendor(p, 32) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func HWSIPServer_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Huawei_GetsVendor(p, 32) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func HWSIPServer_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Huawei_LookupVendor(p, 32)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func HWSIPServer_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Huawei_LookupVendor(p, 32)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func HWSIPServer_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Huawei_SetVendor(p, 32, a)
}

func HWSIPServer_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Huawei_SetVendor(p, 32, a)
}

func HWSIPServer_Del(p *radius.Packet) {
	_Huawei_DelVendor(p, 32)
}

func HWUserPassword_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Huawei_AddVendor(p, 33, a)
}

func HWUserPassword_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Huawei_AddVendor(p, 33, a)
}

func HWUserPassword_Get(p *radius.Packet) (value []byte) {
	value, _ = HWUserPassword_Lookup(p)
	return
}

func HWUserPassword_GetString(p *radius.Packet) (value string) {
	value, _ = HWUserPassword_LookupString(p)
	return
}

func HWUserPassword_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Huawei_GetsVendor(p, 33) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func HWUserPassword_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Huawei_GetsVendor(p, 33) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func HWUserPassword_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Huawei_LookupVendor(p, 33)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func HWUserPassword_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Huawei_LookupVendor(p, 33)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func HWUserPassword_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Huawei_SetVendor(p, 33, a)
}

func HWUserPassword_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Huawei_SetVendor(p, 33, a)
}

func HWUserPassword_Del(p *radius.Packet) {
	_Huawei_DelVendor(p, 33)
}

func HWCommandMode_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Huawei_AddVendor(p, 34, a)
}

func HWCommandMode_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Huawei_AddVendor(p, 34, a)
}

func HWCommandMode_Get(p *radius.Packet) (value []byte) {
	value, _ = HWCommandMode_Lookup(p)
	return
}

func HWCommandMode_GetString(p *radius.Packet) (value string) {
	value, _ = HWCommandMode_LookupString(p)
	return
}

func HWCommandMode_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Huawei_GetsVendor(p, 34) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func HWCommandMode_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Huawei_GetsVendor(p, 34) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func HWCommandMode_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Huawei_LookupVendor(p, 34)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func HWCommandMode_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Huawei_LookupVendor(p, 34)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func HWCommandMode_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Huawei_SetVendor(p, 34, a)
}

func HWCommandMode_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Huawei_SetVendor(p, 34, a)
}

func HWCommandMode_Del(p *radius.Packet) {
	_Huawei_DelVendor(p, 34)
}

type HWRenewalTime uint32

var HWRenewalTime_Strings = map[HWRenewalTime]string{}

func (a HWRenewalTime) String() string {
	if str, ok := HWRenewalTime_Strings[a]; ok {
		return str
	}
	return "HWRenewalTime(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func HWRenewalTime_Add(p *radius.Packet, value HWRenewalTime) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Huawei_AddVendor(p, 35, a)
}

func HWRenewalTime_Get(p *radius.Packet) (value HWRenewalTime) {
	value, _ = HWRenewalTime_Lookup(p)
	return
}

func HWRenewalTime_Gets(p *radius.Packet) (values []HWRenewalTime, err error) {
	var i uint32
	for _, attr := range _Huawei_GetsVendor(p, 35) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, HWRenewalTime(i))
	}
	return
}

func HWRenewalTime_Lookup(p *radius.Packet) (value HWRenewalTime, err error) {
	a, ok := _Huawei_LookupVendor(p, 35)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = HWRenewalTime(i)
	return
}

func HWRenewalTime_Set(p *radius.Packet, value HWRenewalTime) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Huawei_SetVendor(p, 35, a)
}

func HWRenewalTime_Del(p *radius.Packet) {
	_Huawei_DelVendor(p, 35)
}

type HWRebindingTime uint32

var HWRebindingTime_Strings = map[HWRebindingTime]string{}

func (a HWRebindingTime) String() string {
	if str, ok := HWRebindingTime_Strings[a]; ok {
		return str
	}
	return "HWRebindingTime(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func HWRebindingTime_Add(p *radius.Packet, value HWRebindingTime) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Huawei_AddVendor(p, 36, a)
}

func HWRebindingTime_Get(p *radius.Packet) (value HWRebindingTime) {
	value, _ = HWRebindingTime_Lookup(p)
	return
}

func HWRebindingTime_Gets(p *radius.Packet) (values []HWRebindingTime, err error) {
	var i uint32
	for _, attr := range _Huawei_GetsVendor(p, 36) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, HWRebindingTime(i))
	}
	return
}

func HWRebindingTime_Lookup(p *radius.Packet) (value HWRebindingTime, err error) {
	a, ok := _Huawei_LookupVendor(p, 36)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = HWRebindingTime(i)
	return
}

func HWRebindingTime_Set(p *radius.Packet, value HWRebindingTime) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Huawei_SetVendor(p, 36, a)
}

func HWRebindingTime_Del(p *radius.Packet) {
	_Huawei_DelVendor(p, 36)
}

type HWIGMPEnable uint32

var HWIGMPEnable_Strings = map[HWIGMPEnable]string{}

func (a HWIGMPEnable) String() string {
	if str, ok := HWIGMPEnable_Strings[a]; ok {
		return str
	}
	return "HWIGMPEnable(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func HWIGMPEnable_Add(p *radius.Packet, value HWIGMPEnable) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Huawei_AddVendor(p, 37, a)
}

func HWIGMPEnable_Get(p *radius.Packet) (value HWIGMPEnable) {
	value, _ = HWIGMPEnable_Lookup(p)
	return
}

func HWIGMPEnable_Gets(p *radius.Packet) (values []HWIGMPEnable, err error) {
	var i uint32
	for _, attr := range _Huawei_GetsVendor(p, 37) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, HWIGMPEnable(i))
	}
	return
}

func HWIGMPEnable_Lookup(p *radius.Packet) (value HWIGMPEnable, err error) {
	a, ok := _Huawei_LookupVendor(p, 37)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = HWIGMPEnable(i)
	return
}

func HWIGMPEnable_Set(p *radius.Packet, value HWIGMPEnable) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Huawei_SetVendor(p, 37, a)
}

func HWIGMPEnable_Del(p *radius.Packet) {
	_Huawei_DelVendor(p, 37)
}

func HWDestnationIPAddr_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Huawei_AddVendor(p, 39, a)
}

func HWDestnationIPAddr_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Huawei_AddVendor(p, 39, a)
}

func HWDestnationIPAddr_Get(p *radius.Packet) (value []byte) {
	value, _ = HWDestnationIPAddr_Lookup(p)
	return
}

func HWDestnationIPAddr_GetString(p *radius.Packet) (value string) {
	value, _ = HWDestnationIPAddr_LookupString(p)
	return
}

func HWDestnationIPAddr_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Huawei_GetsVendor(p, 39) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func HWDestnationIPAddr_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Huawei_GetsVendor(p, 39) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func HWDestnationIPAddr_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Huawei_LookupVendor(p, 39)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func HWDestnationIPAddr_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Huawei_LookupVendor(p, 39)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func HWDestnationIPAddr_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Huawei_SetVendor(p, 39, a)
}

func HWDestnationIPAddr_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Huawei_SetVendor(p, 39, a)
}

func HWDestnationIPAddr_Del(p *radius.Packet) {
	_Huawei_DelVendor(p, 39)
}

func HWDestnationVolume_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Huawei_AddVendor(p, 40, a)
}

func HWDestnationVolume_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Huawei_AddVendor(p, 40, a)
}

func HWDestnationVolume_Get(p *radius.Packet) (value []byte) {
	value, _ = HWDestnationVolume_Lookup(p)
	return
}

func HWDestnationVolume_GetString(p *radius.Packet) (value string) {
	value, _ = HWDestnationVolume_LookupString(p)
	return
}

func HWDestnationVolume_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Huawei_GetsVendor(p, 40) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func HWDestnationVolume_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Huawei_GetsVendor(p, 40) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func HWDestnationVolume_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Huawei_LookupVendor(p, 40)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func HWDestnationVolume_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Huawei_LookupVendor(p, 40)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func HWDestnationVolume_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Huawei_SetVendor(p, 40, a)
}

func HWDestnationVolume_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Huawei_SetVendor(p, 40, a)
}

func HWDestnationVolume_Del(p *radius.Packet) {
	_Huawei_DelVendor(p, 40)
}

type HWStartupStamp uint32

var HWStartupStamp_Strings = map[HWStartupStamp]string{}

func (a HWStartupStamp) String() string {
	if str, ok := HWStartupStamp_Strings[a]; ok {
		return str
	}
	return "HWStartupStamp(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func HWStartupStamp_Add(p *radius.Packet, value HWStartupStamp) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Huawei_AddVendor(p, 59, a)
}

func HWStartupStamp_Get(p *radius.Packet) (value HWStartupStamp) {
	value, _ = HWStartupStamp_Lookup(p)
	return
}

func HWStartupStamp_Gets(p *radius.Packet) (values []HWStartupStamp, err error) {
	var i uint32
	for _, attr := range _Huawei_GetsVendor(p, 59) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, HWStartupStamp(i))
	}
	return
}

func HWStartupStamp_Lookup(p *radius.Packet) (value HWStartupStamp, err error) {
	a, ok := _Huawei_LookupVendor(p, 59)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = HWStartupStamp(i)
	return
}

func HWStartupStamp_Set(p *radius.Packet, value HWStartupStamp) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Huawei_SetVendor(p, 59, a)
}

func HWStartupStamp_Del(p *radius.Packet) {
	_Huawei_DelVendor(p, 59)
}

func HWIPHostAddr_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Huawei_AddVendor(p, 60, a)
}

func HWIPHostAddr_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Huawei_AddVendor(p, 60, a)
}

func HWIPHostAddr_Get(p *radius.Packet) (value []byte) {
	value, _ = HWIPHostAddr_Lookup(p)
	return
}

func HWIPHostAddr_GetString(p *radius.Packet) (value string) {
	value, _ = HWIPHostAddr_LookupString(p)
	return
}

func HWIPHostAddr_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Huawei_GetsVendor(p, 60) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func HWIPHostAddr_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Huawei_GetsVendor(p, 60) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func HWIPHostAddr_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Huawei_LookupVendor(p, 60)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func HWIPHostAddr_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Huawei_LookupVendor(p, 60)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func HWIPHostAddr_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Huawei_SetVendor(p, 60, a)
}

func HWIPHostAddr_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Huawei_SetVendor(p, 60, a)
}

func HWIPHostAddr_Del(p *radius.Packet) {
	_Huawei_DelVendor(p, 60)
}

type HWUpPriority uint32

var HWUpPriority_Strings = map[HWUpPriority]string{}

func (a HWUpPriority) String() string {
	if str, ok := HWUpPriority_Strings[a]; ok {
		return str
	}
	return "HWUpPriority(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func HWUpPriority_Add(p *radius.Packet, value HWUpPriority) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Huawei_AddVendor(p, 61, a)
}

func HWUpPriority_Get(p *radius.Packet) (value HWUpPriority) {
	value, _ = HWUpPriority_Lookup(p)
	return
}

func HWUpPriority_Gets(p *radius.Packet) (values []HWUpPriority, err error) {
	var i uint32
	for _, attr := range _Huawei_GetsVendor(p, 61) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, HWUpPriority(i))
	}
	return
}

func HWUpPriority_Lookup(p *radius.Packet) (value HWUpPriority, err error) {
	a, ok := _Huawei_LookupVendor(p, 61)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = HWUpPriority(i)
	return
}

func HWUpPriority_Set(p *radius.Packet, value HWUpPriority) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Huawei_SetVendor(p, 61, a)
}

func HWUpPriority_Del(p *radius.Packet) {
	_Huawei_DelVendor(p, 61)
}

type HWDownPriority uint32

var HWDownPriority_Strings = map[HWDownPriority]string{}

func (a HWDownPriority) String() string {
	if str, ok := HWDownPriority_Strings[a]; ok {
		return str
	}
	return "HWDownPriority(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func HWDownPriority_Add(p *radius.Packet, value HWDownPriority) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Huawei_AddVendor(p, 62, a)
}

func HWDownPriority_Get(p *radius.Packet) (value HWDownPriority) {
	value, _ = HWDownPriority_Lookup(p)
	return
}

func HWDownPriority_Gets(p *radius.Packet) (values []HWDownPriority, err error) {
	var i uint32
	for _, attr := range _Huawei_GetsVendor(p, 62) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, HWDownPriority(i))
	}
	return
}

func HWDownPriority_Lookup(p *radius.Packet) (value HWDownPriority, err error) {
	a, ok := _Huawei_LookupVendor(p, 62)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = HWDownPriority(i)
	return
}

func HWDownPriority_Set(p *radius.Packet, value HWDownPriority) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Huawei_SetVendor(p, 62, a)
}

func HWDownPriority_Del(p *radius.Packet) {
	_Huawei_DelVendor(p, 62)
}

func HWTunnelVPNInstance_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Huawei_AddVendor(p, 63, a)
}

func HWTunnelVPNInstance_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Huawei_AddVendor(p, 63, a)
}

func HWTunnelVPNInstance_Get(p *radius.Packet) (value []byte) {
	value, _ = HWTunnelVPNInstance_Lookup(p)
	return
}

func HWTunnelVPNInstance_GetString(p *radius.Packet) (value string) {
	value, _ = HWTunnelVPNInstance_LookupString(p)
	return
}

func HWTunnelVPNInstance_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Huawei_GetsVendor(p, 63) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func HWTunnelVPNInstance_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Huawei_GetsVendor(p, 63) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func HWTunnelVPNInstance_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Huawei_LookupVendor(p, 63)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func HWTunnelVPNInstance_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Huawei_LookupVendor(p, 63)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func HWTunnelVPNInstance_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Huawei_SetVendor(p, 63, a)
}

func HWTunnelVPNInstance_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Huawei_SetVendor(p, 63, a)
}

func HWTunnelVPNInstance_Del(p *radius.Packet) {
	_Huawei_DelVendor(p, 63)
}

type HWVTName uint32

var HWVTName_Strings = map[HWVTName]string{}

func (a HWVTName) String() string {
	if str, ok := HWVTName_Strings[a]; ok {
		return str
	}
	return "HWVTName(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func HWVTName_Add(p *radius.Packet, value HWVTName) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Huawei_AddVendor(p, 64, a)
}

func HWVTName_Get(p *radius.Packet) (value HWVTName) {
	value, _ = HWVTName_Lookup(p)
	return
}

func HWVTName_Gets(p *radius.Packet) (values []HWVTName, err error) {
	var i uint32
	for _, attr := range _Huawei_GetsVendor(p, 64) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, HWVTName(i))
	}
	return
}

func HWVTName_Lookup(p *radius.Packet) (value HWVTName, err error) {
	a, ok := _Huawei_LookupVendor(p, 64)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = HWVTName(i)
	return
}

func HWVTName_Set(p *radius.Packet, value HWVTName) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Huawei_SetVendor(p, 64, a)
}

func HWVTName_Del(p *radius.Packet) {
	_Huawei_DelVendor(p, 64)
}

func HWUserDate_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Huawei_AddVendor(p, 65, a)
}

func HWUserDate_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Huawei_AddVendor(p, 65, a)
}

func HWUserDate_Get(p *radius.Packet) (value []byte) {
	value, _ = HWUserDate_Lookup(p)
	return
}

func HWUserDate_GetString(p *radius.Packet) (value string) {
	value, _ = HWUserDate_LookupString(p)
	return
}

func HWUserDate_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Huawei_GetsVendor(p, 65) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func HWUserDate_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Huawei_GetsVendor(p, 65) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func HWUserDate_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Huawei_LookupVendor(p, 65)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func HWUserDate_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Huawei_LookupVendor(p, 65)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func HWUserDate_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Huawei_SetVendor(p, 65, a)
}

func HWUserDate_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Huawei_SetVendor(p, 65, a)
}

func HWUserDate_Del(p *radius.Packet) {
	_Huawei_DelVendor(p, 65)
}

func HWUserClass_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Huawei_AddVendor(p, 66, a)
}

func HWUserClass_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Huawei_AddVendor(p, 66, a)
}

func HWUserClass_Get(p *radius.Packet) (value []byte) {
	value, _ = HWUserClass_Lookup(p)
	return
}

func HWUserClass_GetString(p *radius.Packet) (value string) {
	value, _ = HWUserClass_LookupString(p)
	return
}

func HWUserClass_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Huawei_GetsVendor(p, 66) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func HWUserClass_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Huawei_GetsVendor(p, 66) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func HWUserClass_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Huawei_LookupVendor(p, 66)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func HWUserClass_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Huawei_LookupVendor(p, 66)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func HWUserClass_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Huawei_SetVendor(p, 66, a)
}

func HWUserClass_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Huawei_SetVendor(p, 66, a)
}

func HWUserClass_Del(p *radius.Packet) {
	_Huawei_DelVendor(p, 66)
}

type HWPPPNCPType uint32

var HWPPPNCPType_Strings = map[HWPPPNCPType]string{}

func (a HWPPPNCPType) String() string {
	if str, ok := HWPPPNCPType_Strings[a]; ok {
		return str
	}
	return "HWPPPNCPType(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func HWPPPNCPType_Add(p *radius.Packet, value HWPPPNCPType) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Huawei_AddVendor(p, 70, a)
}

func HWPPPNCPType_Get(p *radius.Packet) (value HWPPPNCPType) {
	value, _ = HWPPPNCPType_Lookup(p)
	return
}

func HWPPPNCPType_Gets(p *radius.Packet) (values []HWPPPNCPType, err error) {
	var i uint32
	for _, attr := range _Huawei_GetsVendor(p, 70) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, HWPPPNCPType(i))
	}
	return
}

func HWPPPNCPType_Lookup(p *radius.Packet) (value HWPPPNCPType, err error) {
	a, ok := _Huawei_LookupVendor(p, 70)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = HWPPPNCPType(i)
	return
}

func HWPPPNCPType_Set(p *radius.Packet, value HWPPPNCPType) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Huawei_SetVendor(p, 70, a)
}

func HWPPPNCPType_Del(p *radius.Packet) {
	_Huawei_DelVendor(p, 70)
}

func HWVSIName_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Huawei_AddVendor(p, 71, a)
}

func HWVSIName_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Huawei_AddVendor(p, 71, a)
}

func HWVSIName_Get(p *radius.Packet) (value []byte) {
	value, _ = HWVSIName_Lookup(p)
	return
}

func HWVSIName_GetString(p *radius.Packet) (value string) {
	value, _ = HWVSIName_LookupString(p)
	return
}

func HWVSIName_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Huawei_GetsVendor(p, 71) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func HWVSIName_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Huawei_GetsVendor(p, 71) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func HWVSIName_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Huawei_LookupVendor(p, 71)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func HWVSIName_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Huawei_LookupVendor(p, 71)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func HWVSIName_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Huawei_SetVendor(p, 71, a)
}

func HWVSIName_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Huawei_SetVendor(p, 71, a)
}

func HWVSIName_Del(p *radius.Packet) {
	_Huawei_DelVendor(p, 71)
}

func HWSubnetMask_Add(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPAddr(value)
	if err != nil {
		return
	}
	return _Huawei_AddVendor(p, 72, a)
}

func HWSubnetMask_Get(p *radius.Packet) (value net.IP) {
	value, _ = HWSubnetMask_Lookup(p)
	return
}

func HWSubnetMask_Gets(p *radius.Packet) (values []net.IP, err error) {
	var i net.IP
	for _, attr := range _Huawei_GetsVendor(p, 72) {
		i, err = radius.IPAddr(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func HWSubnetMask_Lookup(p *radius.Packet) (value net.IP, err error) {
	a, ok := _Huawei_LookupVendor(p, 72)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value, err = radius.IPAddr(a)
	return
}

func HWSubnetMask_Set(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPAddr(value)
	if err != nil {
		return
	}
	return _Huawei_SetVendor(p, 72, a)
}

func HWSubnetMask_Del(p *radius.Packet) {
	_Huawei_DelVendor(p, 72)
}

func HWGatewayAddress_Add(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPAddr(value)
	if err != nil {
		return
	}
	return _Huawei_AddVendor(p, 73, a)
}

func HWGatewayAddress_Get(p *radius.Packet) (value net.IP) {
	value, _ = HWGatewayAddress_Lookup(p)
	return
}

func HWGatewayAddress_Gets(p *radius.Packet) (values []net.IP, err error) {
	var i net.IP
	for _, attr := range _Huawei_GetsVendor(p, 73) {
		i, err = radius.IPAddr(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func HWGatewayAddress_Lookup(p *radius.Packet) (value net.IP, err error) {
	a, ok := _Huawei_LookupVendor(p, 73)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value, err = radius.IPAddr(a)
	return
}

func HWGatewayAddress_Set(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPAddr(value)
	if err != nil {
		return
	}
	return _Huawei_SetVendor(p, 73, a)
}

func HWGatewayAddress_Del(p *radius.Packet) {
	_Huawei_DelVendor(p, 73)
}

type HWLeaseTime uint32

var HWLeaseTime_Strings = map[HWLeaseTime]string{}

func (a HWLeaseTime) String() string {
	if str, ok := HWLeaseTime_Strings[a]; ok {
		return str
	}
	return "HWLeaseTime(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func HWLeaseTime_Add(p *radius.Packet, value HWLeaseTime) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Huawei_AddVendor(p, 74, a)
}

func HWLeaseTime_Get(p *radius.Packet) (value HWLeaseTime) {
	value, _ = HWLeaseTime_Lookup(p)
	return
}

func HWLeaseTime_Gets(p *radius.Packet) (values []HWLeaseTime, err error) {
	var i uint32
	for _, attr := range _Huawei_GetsVendor(p, 74) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, HWLeaseTime(i))
	}
	return
}

func HWLeaseTime_Lookup(p *radius.Packet) (value HWLeaseTime, err error) {
	a, ok := _Huawei_LookupVendor(p, 74)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = HWLeaseTime(i)
	return
}

func HWLeaseTime_Set(p *radius.Packet, value HWLeaseTime) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Huawei_SetVendor(p, 74, a)
}

func HWLeaseTime_Del(p *radius.Packet) {
	_Huawei_DelVendor(p, 74)
}

func HWPrimaryWINS_Add(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPAddr(value)
	if err != nil {
		return
	}
	return _Huawei_AddVendor(p, 75, a)
}

func HWPrimaryWINS_Get(p *radius.Packet) (value net.IP) {
	value, _ = HWPrimaryWINS_Lookup(p)
	return
}

func HWPrimaryWINS_Gets(p *radius.Packet) (values []net.IP, err error) {
	var i net.IP
	for _, attr := range _Huawei_GetsVendor(p, 75) {
		i, err = radius.IPAddr(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func HWPrimaryWINS_Lookup(p *radius.Packet) (value net.IP, err error) {
	a, ok := _Huawei_LookupVendor(p, 75)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value, err = radius.IPAddr(a)
	return
}

func HWPrimaryWINS_Set(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPAddr(value)
	if err != nil {
		return
	}
	return _Huawei_SetVendor(p, 75, a)
}

func HWPrimaryWINS_Del(p *radius.Packet) {
	_Huawei_DelVendor(p, 75)
}

func HWSecondaryWINS_Add(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPAddr(value)
	if err != nil {
		return
	}
	return _Huawei_AddVendor(p, 76, a)
}

func HWSecondaryWINS_Get(p *radius.Packet) (value net.IP) {
	value, _ = HWSecondaryWINS_Lookup(p)
	return
}

func HWSecondaryWINS_Gets(p *radius.Packet) (values []net.IP, err error) {
	var i net.IP
	for _, attr := range _Huawei_GetsVendor(p, 76) {
		i, err = radius.IPAddr(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func HWSecondaryWINS_Lookup(p *radius.Packet) (value net.IP, err error) {
	a, ok := _Huawei_LookupVendor(p, 76)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value, err = radius.IPAddr(a)
	return
}

func HWSecondaryWINS_Set(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPAddr(value)
	if err != nil {
		return
	}
	return _Huawei_SetVendor(p, 76, a)
}

func HWSecondaryWINS_Del(p *radius.Packet) {
	_Huawei_DelVendor(p, 76)
}

type HWInputPeakBurstSize uint32

var HWInputPeakBurstSize_Strings = map[HWInputPeakBurstSize]string{}

func (a HWInputPeakBurstSize) String() string {
	if str, ok := HWInputPeakBurstSize_Strings[a]; ok {
		return str
	}
	return "HWInputPeakBurstSize(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func HWInputPeakBurstSize_Add(p *radius.Packet, value HWInputPeakBurstSize) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Huawei_AddVendor(p, 77, a)
}

func HWInputPeakBurstSize_Get(p *radius.Packet) (value HWInputPeakBurstSize) {
	value, _ = HWInputPeakBurstSize_Lookup(p)
	return
}

func HWInputPeakBurstSize_Gets(p *radius.Packet) (values []HWInputPeakBurstSize, err error) {
	var i uint32
	for _, attr := range _Huawei_GetsVendor(p, 77) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, HWInputPeakBurstSize(i))
	}
	return
}

func HWInputPeakBurstSize_Lookup(p *radius.Packet) (value HWInputPeakBurstSize, err error) {
	a, ok := _Huawei_LookupVendor(p, 77)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = HWInputPeakBurstSize(i)
	return
}

func HWInputPeakBurstSize_Set(p *radius.Packet, value HWInputPeakBurstSize) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Huawei_SetVendor(p, 77, a)
}

func HWInputPeakBurstSize_Del(p *radius.Packet) {
	_Huawei_DelVendor(p, 77)
}

type HWOutputPeakBurstSize uint32

var HWOutputPeakBurstSize_Strings = map[HWOutputPeakBurstSize]string{}

func (a HWOutputPeakBurstSize) String() string {
	if str, ok := HWOutputPeakBurstSize_Strings[a]; ok {
		return str
	}
	return "HWOutputPeakBurstSize(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func HWOutputPeakBurstSize_Add(p *radius.Packet, value HWOutputPeakBurstSize) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Huawei_AddVendor(p, 78, a)
}

func HWOutputPeakBurstSize_Get(p *radius.Packet) (value HWOutputPeakBurstSize) {
	value, _ = HWOutputPeakBurstSize_Lookup(p)
	return
}

func HWOutputPeakBurstSize_Gets(p *radius.Packet) (values []HWOutputPeakBurstSize, err error) {
	var i uint32
	for _, attr := range _Huawei_GetsVendor(p, 78) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, HWOutputPeakBurstSize(i))
	}
	return
}

func HWOutputPeakBurstSize_Lookup(p *radius.Packet) (value HWOutputPeakBurstSize, err error) {
	a, ok := _Huawei_LookupVendor(p, 78)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = HWOutputPeakBurstSize(i)
	return
}

func HWOutputPeakBurstSize_Set(p *radius.Packet, value HWOutputPeakBurstSize) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Huawei_SetVendor(p, 78, a)
}

func HWOutputPeakBurstSize_Del(p *radius.Packet) {
	_Huawei_DelVendor(p, 78)
}

type HWReducedCIR uint32

var HWReducedCIR_Strings = map[HWReducedCIR]string{}

func (a HWReducedCIR) String() string {
	if str, ok := HWReducedCIR_Strings[a]; ok {
		return str
	}
	return "HWReducedCIR(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func HWReducedCIR_Add(p *radius.Packet, value HWReducedCIR) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Huawei_AddVendor(p, 79, a)
}

func HWReducedCIR_Get(p *radius.Packet) (value HWReducedCIR) {
	value, _ = HWReducedCIR_Lookup(p)
	return
}

func HWReducedCIR_Gets(p *radius.Packet) (values []HWReducedCIR, err error) {
	var i uint32
	for _, attr := range _Huawei_GetsVendor(p, 79) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, HWReducedCIR(i))
	}
	return
}

func HWReducedCIR_Lookup(p *radius.Packet) (value HWReducedCIR, err error) {
	a, ok := _Huawei_LookupVendor(p, 79)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = HWReducedCIR(i)
	return
}

func HWReducedCIR_Set(p *radius.Packet, value HWReducedCIR) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Huawei_SetVendor(p, 79, a)
}

func HWReducedCIR_Del(p *radius.Packet) {
	_Huawei_DelVendor(p, 79)
}

type HWTunnelSessionLimit uint32

var HWTunnelSessionLimit_Strings = map[HWTunnelSessionLimit]string{}

func (a HWTunnelSessionLimit) String() string {
	if str, ok := HWTunnelSessionLimit_Strings[a]; ok {
		return str
	}
	return "HWTunnelSessionLimit(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func HWTunnelSessionLimit_Add(p *radius.Packet, value HWTunnelSessionLimit) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Huawei_AddVendor(p, 80, a)
}

func HWTunnelSessionLimit_Get(p *radius.Packet) (value HWTunnelSessionLimit) {
	value, _ = HWTunnelSessionLimit_Lookup(p)
	return
}

func HWTunnelSessionLimit_Gets(p *radius.Packet) (values []HWTunnelSessionLimit, err error) {
	var i uint32
	for _, attr := range _Huawei_GetsVendor(p, 80) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, HWTunnelSessionLimit(i))
	}
	return
}

func HWTunnelSessionLimit_Lookup(p *radius.Packet) (value HWTunnelSessionLimit, err error) {
	a, ok := _Huawei_LookupVendor(p, 80)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = HWTunnelSessionLimit(i)
	return
}

func HWTunnelSessionLimit_Set(p *radius.Packet, value HWTunnelSessionLimit) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Huawei_SetVendor(p, 80, a)
}

func HWTunnelSessionLimit_Del(p *radius.Packet) {
	_Huawei_DelVendor(p, 80)
}

func HWZoneName_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Huawei_AddVendor(p, 81, a)
}

func HWZoneName_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Huawei_AddVendor(p, 81, a)
}

func HWZoneName_Get(p *radius.Packet) (value []byte) {
	value, _ = HWZoneName_Lookup(p)
	return
}

func HWZoneName_GetString(p *radius.Packet) (value string) {
	value, _ = HWZoneName_LookupString(p)
	return
}

func HWZoneName_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Huawei_GetsVendor(p, 81) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func HWZoneName_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Huawei_GetsVendor(p, 81) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func HWZoneName_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Huawei_LookupVendor(p, 81)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func HWZoneName_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Huawei_LookupVendor(p, 81)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func HWZoneName_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Huawei_SetVendor(p, 81, a)
}

func HWZoneName_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Huawei_SetVendor(p, 81, a)
}

func HWZoneName_Del(p *radius.Packet) {
	_Huawei_DelVendor(p, 81)
}

func HWDataFilter_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Huawei_AddVendor(p, 82, a)
}

func HWDataFilter_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Huawei_AddVendor(p, 82, a)
}

func HWDataFilter_Get(p *radius.Packet) (value []byte) {
	value, _ = HWDataFilter_Lookup(p)
	return
}

func HWDataFilter_GetString(p *radius.Packet) (value string) {
	value, _ = HWDataFilter_LookupString(p)
	return
}

func HWDataFilter_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Huawei_GetsVendor(p, 82) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func HWDataFilter_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Huawei_GetsVendor(p, 82) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func HWDataFilter_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Huawei_LookupVendor(p, 82)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func HWDataFilter_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Huawei_LookupVendor(p, 82)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func HWDataFilter_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Huawei_SetVendor(p, 82, a)
}

func HWDataFilter_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Huawei_SetVendor(p, 82, a)
}

func HWDataFilter_Del(p *radius.Packet) {
	_Huawei_DelVendor(p, 82)
}

func HWAccessService_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Huawei_AddVendor(p, 83, a)
}

func HWAccessService_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Huawei_AddVendor(p, 83, a)
}

func HWAccessService_Get(p *radius.Packet) (value []byte) {
	value, _ = HWAccessService_Lookup(p)
	return
}

func HWAccessService_GetString(p *radius.Packet) (value string) {
	value, _ = HWAccessService_LookupString(p)
	return
}

func HWAccessService_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Huawei_GetsVendor(p, 83) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func HWAccessService_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Huawei_GetsVendor(p, 83) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func HWAccessService_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Huawei_LookupVendor(p, 83)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func HWAccessService_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Huawei_LookupVendor(p, 83)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func HWAccessService_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Huawei_SetVendor(p, 83, a)
}

func HWAccessService_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Huawei_SetVendor(p, 83, a)
}

func HWAccessService_Del(p *radius.Packet) {
	_Huawei_DelVendor(p, 83)
}

type HWAccountingLevel uint32

var HWAccountingLevel_Strings = map[HWAccountingLevel]string{}

func (a HWAccountingLevel) String() string {
	if str, ok := HWAccountingLevel_Strings[a]; ok {
		return str
	}
	return "HWAccountingLevel(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func HWAccountingLevel_Add(p *radius.Packet, value HWAccountingLevel) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Huawei_AddVendor(p, 84, a)
}

func HWAccountingLevel_Get(p *radius.Packet) (value HWAccountingLevel) {
	value, _ = HWAccountingLevel_Lookup(p)
	return
}

func HWAccountingLevel_Gets(p *radius.Packet) (values []HWAccountingLevel, err error) {
	var i uint32
	for _, attr := range _Huawei_GetsVendor(p, 84) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, HWAccountingLevel(i))
	}
	return
}

func HWAccountingLevel_Lookup(p *radius.Packet) (value HWAccountingLevel, err error) {
	a, ok := _Huawei_LookupVendor(p, 84)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = HWAccountingLevel(i)
	return
}

func HWAccountingLevel_Set(p *radius.Packet, value HWAccountingLevel) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Huawei_SetVendor(p, 84, a)
}

func HWAccountingLevel_Del(p *radius.Packet) {
	_Huawei_DelVendor(p, 84)
}

type HWPortalMode uint32

const (
	HWPortalMode_Value_PADM          HWPortalMode = 0
	HWPortalMode_Value_Redirectional HWPortalMode = 1
	HWPortalMode_Value_NonCaptive    HWPortalMode = 2
)

var HWPortalMode_Strings = map[HWPortalMode]string{
	HWPortalMode_Value_PADM:          "PADM",
	HWPortalMode_Value_Redirectional: "Redirectional",
	HWPortalMode_Value_NonCaptive:    "Non-captive",
}

func (a HWPortalMode) String() string {
	if str, ok := HWPortalMode_Strings[a]; ok {
		return str
	}
	return "HWPortalMode(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func HWPortalMode_Add(p *radius.Packet, value HWPortalMode) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Huawei_AddVendor(p, 85, a)
}

func HWPortalMode_Get(p *radius.Packet) (value HWPortalMode) {
	value, _ = HWPortalMode_Lookup(p)
	return
}

func HWPortalMode_Gets(p *radius.Packet) (values []HWPortalMode, err error) {
	var i uint32
	for _, attr := range _Huawei_GetsVendor(p, 85) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, HWPortalMode(i))
	}
	return
}

func HWPortalMode_Lookup(p *radius.Packet) (value HWPortalMode, err error) {
	a, ok := _Huawei_LookupVendor(p, 85)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = HWPortalMode(i)
	return
}

func HWPortalMode_Set(p *radius.Packet, value HWPortalMode) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Huawei_SetVendor(p, 85, a)
}

func HWPortalMode_Del(p *radius.Packet) {
	_Huawei_DelVendor(p, 85)
}

func HWDPIPolicyName_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Huawei_AddVendor(p, 86, a)
}

func HWDPIPolicyName_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Huawei_AddVendor(p, 86, a)
}

func HWDPIPolicyName_Get(p *radius.Packet) (value []byte) {
	value, _ = HWDPIPolicyName_Lookup(p)
	return
}

func HWDPIPolicyName_GetString(p *radius.Packet) (value string) {
	value, _ = HWDPIPolicyName_LookupString(p)
	return
}

func HWDPIPolicyName_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Huawei_GetsVendor(p, 86) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func HWDPIPolicyName_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Huawei_GetsVendor(p, 86) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func HWDPIPolicyName_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Huawei_LookupVendor(p, 86)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func HWDPIPolicyName_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Huawei_LookupVendor(p, 86)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func HWDPIPolicyName_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Huawei_SetVendor(p, 86, a)
}

func HWDPIPolicyName_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Huawei_SetVendor(p, 86, a)
}

func HWDPIPolicyName_Del(p *radius.Packet) {
	_Huawei_DelVendor(p, 86)
}

func HuaweiPolicyRoute_Add(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPAddr(value)
	if err != nil {
		return
	}
	return _Huawei_AddVendor(p, 87, a)
}

func HuaweiPolicyRoute_Get(p *radius.Packet) (value net.IP) {
	value, _ = HuaweiPolicyRoute_Lookup(p)
	return
}

func HuaweiPolicyRoute_Gets(p *radius.Packet) (values []net.IP, err error) {
	var i net.IP
	for _, attr := range _Huawei_GetsVendor(p, 87) {
		i, err = radius.IPAddr(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func HuaweiPolicyRoute_Lookup(p *radius.Packet) (value net.IP, err error) {
	a, ok := _Huawei_LookupVendor(p, 87)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value, err = radius.IPAddr(a)
	return
}

func HuaweiPolicyRoute_Set(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPAddr(value)
	if err != nil {
		return
	}
	return _Huawei_SetVendor(p, 87, a)
}

func HuaweiPolicyRoute_Del(p *radius.Packet) {
	_Huawei_DelVendor(p, 87)
}

func HWFramedPool_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Huawei_AddVendor(p, 88, a)
}

func HWFramedPool_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Huawei_AddVendor(p, 88, a)
}

func HWFramedPool_Get(p *radius.Packet) (value []byte) {
	value, _ = HWFramedPool_Lookup(p)
	return
}

func HWFramedPool_GetString(p *radius.Packet) (value string) {
	value, _ = HWFramedPool_LookupString(p)
	return
}

func HWFramedPool_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Huawei_GetsVendor(p, 88) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func HWFramedPool_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Huawei_GetsVendor(p, 88) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func HWFramedPool_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Huawei_LookupVendor(p, 88)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func HWFramedPool_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Huawei_LookupVendor(p, 88)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func HWFramedPool_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Huawei_SetVendor(p, 88, a)
}

func HWFramedPool_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Huawei_SetVendor(p, 88, a)
}

func HWFramedPool_Del(p *radius.Packet) {
	_Huawei_DelVendor(p, 88)
}

func HWL2TPTerminateCause_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Huawei_AddVendor(p, 89, a)
}

func HWL2TPTerminateCause_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Huawei_AddVendor(p, 89, a)
}

func HWL2TPTerminateCause_Get(p *radius.Packet) (value []byte) {
	value, _ = HWL2TPTerminateCause_Lookup(p)
	return
}

func HWL2TPTerminateCause_GetString(p *radius.Packet) (value string) {
	value, _ = HWL2TPTerminateCause_LookupString(p)
	return
}

func HWL2TPTerminateCause_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Huawei_GetsVendor(p, 89) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func HWL2TPTerminateCause_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Huawei_GetsVendor(p, 89) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func HWL2TPTerminateCause_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Huawei_LookupVendor(p, 89)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func HWL2TPTerminateCause_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Huawei_LookupVendor(p, 89)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func HWL2TPTerminateCause_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Huawei_SetVendor(p, 89, a)
}

func HWL2TPTerminateCause_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Huawei_SetVendor(p, 89, a)
}

func HWL2TPTerminateCause_Del(p *radius.Packet) {
	_Huawei_DelVendor(p, 89)
}

type HWMultiAccountMode uint32

var HWMultiAccountMode_Strings = map[HWMultiAccountMode]string{}

func (a HWMultiAccountMode) String() string {
	if str, ok := HWMultiAccountMode_Strings[a]; ok {
		return str
	}
	return "HWMultiAccountMode(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func HWMultiAccountMode_Add(p *radius.Packet, value HWMultiAccountMode) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Huawei_AddVendor(p, 90, a)
}

func HWMultiAccountMode_Get(p *radius.Packet) (value HWMultiAccountMode) {
	value, _ = HWMultiAccountMode_Lookup(p)
	return
}

func HWMultiAccountMode_Gets(p *radius.Packet) (values []HWMultiAccountMode, err error) {
	var i uint32
	for _, attr := range _Huawei_GetsVendor(p, 90) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, HWMultiAccountMode(i))
	}
	return
}

func HWMultiAccountMode_Lookup(p *radius.Packet) (value HWMultiAccountMode, err error) {
	a, ok := _Huawei_LookupVendor(p, 90)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = HWMultiAccountMode(i)
	return
}

func HWMultiAccountMode_Set(p *radius.Packet, value HWMultiAccountMode) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Huawei_SetVendor(p, 90, a)
}

func HWMultiAccountMode_Del(p *radius.Packet) {
	_Huawei_DelVendor(p, 90)
}

func HWQueueProfile_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Huawei_AddVendor(p, 91, a)
}

func HWQueueProfile_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Huawei_AddVendor(p, 91, a)
}

func HWQueueProfile_Get(p *radius.Packet) (value []byte) {
	value, _ = HWQueueProfile_Lookup(p)
	return
}

func HWQueueProfile_GetString(p *radius.Packet) (value string) {
	value, _ = HWQueueProfile_LookupString(p)
	return
}

func HWQueueProfile_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Huawei_GetsVendor(p, 91) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func HWQueueProfile_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Huawei_GetsVendor(p, 91) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func HWQueueProfile_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Huawei_LookupVendor(p, 91)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func HWQueueProfile_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Huawei_LookupVendor(p, 91)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func HWQueueProfile_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Huawei_SetVendor(p, 91, a)
}

func HWQueueProfile_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Huawei_SetVendor(p, 91, a)
}

func HWQueueProfile_Del(p *radius.Packet) {
	_Huawei_DelVendor(p, 91)
}

type HWLayer4SessionLimit uint32

var HWLayer4SessionLimit_Strings = map[HWLayer4SessionLimit]string{}

func (a HWLayer4SessionLimit) String() string {
	if str, ok := HWLayer4SessionLimit_Strings[a]; ok {
		return str
	}
	return "HWLayer4SessionLimit(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func HWLayer4SessionLimit_Add(p *radius.Packet, value HWLayer4SessionLimit) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Huawei_AddVendor(p, 92, a)
}

func HWLayer4SessionLimit_Get(p *radius.Packet) (value HWLayer4SessionLimit) {
	value, _ = HWLayer4SessionLimit_Lookup(p)
	return
}

func HWLayer4SessionLimit_Gets(p *radius.Packet) (values []HWLayer4SessionLimit, err error) {
	var i uint32
	for _, attr := range _Huawei_GetsVendor(p, 92) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, HWLayer4SessionLimit(i))
	}
	return
}

func HWLayer4SessionLimit_Lookup(p *radius.Packet) (value HWLayer4SessionLimit, err error) {
	a, ok := _Huawei_LookupVendor(p, 92)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = HWLayer4SessionLimit(i)
	return
}

func HWLayer4SessionLimit_Set(p *radius.Packet, value HWLayer4SessionLimit) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Huawei_SetVendor(p, 92, a)
}

func HWLayer4SessionLimit_Del(p *radius.Packet) {
	_Huawei_DelVendor(p, 92)
}

func HWMulticastProfile_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Huawei_AddVendor(p, 93, a)
}

func HWMulticastProfile_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Huawei_AddVendor(p, 93, a)
}

func HWMulticastProfile_Get(p *radius.Packet) (value []byte) {
	value, _ = HWMulticastProfile_Lookup(p)
	return
}

func HWMulticastProfile_GetString(p *radius.Packet) (value string) {
	value, _ = HWMulticastProfile_LookupString(p)
	return
}

func HWMulticastProfile_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Huawei_GetsVendor(p, 93) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func HWMulticastProfile_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Huawei_GetsVendor(p, 93) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func HWMulticastProfile_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Huawei_LookupVendor(p, 93)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func HWMulticastProfile_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Huawei_LookupVendor(p, 93)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func HWMulticastProfile_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Huawei_SetVendor(p, 93, a)
}

func HWMulticastProfile_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Huawei_SetVendor(p, 93, a)
}

func HWMulticastProfile_Del(p *radius.Packet) {
	_Huawei_DelVendor(p, 93)
}

func HWVPNInstance_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Huawei_AddVendor(p, 94, a)
}

func HWVPNInstance_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Huawei_AddVendor(p, 94, a)
}

func HWVPNInstance_Get(p *radius.Packet) (value []byte) {
	value, _ = HWVPNInstance_Lookup(p)
	return
}

func HWVPNInstance_GetString(p *radius.Packet) (value string) {
	value, _ = HWVPNInstance_LookupString(p)
	return
}

func HWVPNInstance_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Huawei_GetsVendor(p, 94) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func HWVPNInstance_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Huawei_GetsVendor(p, 94) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func HWVPNInstance_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Huawei_LookupVendor(p, 94)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func HWVPNInstance_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Huawei_LookupVendor(p, 94)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func HWVPNInstance_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Huawei_SetVendor(p, 94, a)
}

func HWVPNInstance_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Huawei_SetVendor(p, 94, a)
}

func HWVPNInstance_Del(p *radius.Packet) {
	_Huawei_DelVendor(p, 94)
}

func HWPolicyName_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Huawei_AddVendor(p, 95, a)
}

func HWPolicyName_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Huawei_AddVendor(p, 95, a)
}

func HWPolicyName_Get(p *radius.Packet) (value []byte) {
	value, _ = HWPolicyName_Lookup(p)
	return
}

func HWPolicyName_GetString(p *radius.Packet) (value string) {
	value, _ = HWPolicyName_LookupString(p)
	return
}

func HWPolicyName_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Huawei_GetsVendor(p, 95) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func HWPolicyName_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Huawei_GetsVendor(p, 95) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func HWPolicyName_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Huawei_LookupVendor(p, 95)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func HWPolicyName_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Huawei_LookupVendor(p, 95)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func HWPolicyName_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Huawei_SetVendor(p, 95, a)
}

func HWPolicyName_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Huawei_SetVendor(p, 95, a)
}

func HWPolicyName_Del(p *radius.Packet) {
	_Huawei_DelVendor(p, 95)
}

func HWTunnelGroupName_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Huawei_AddVendor(p, 96, a)
}

func HWTunnelGroupName_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Huawei_AddVendor(p, 96, a)
}

func HWTunnelGroupName_Get(p *radius.Packet) (value []byte) {
	value, _ = HWTunnelGroupName_Lookup(p)
	return
}

func HWTunnelGroupName_GetString(p *radius.Packet) (value string) {
	value, _ = HWTunnelGroupName_LookupString(p)
	return
}

func HWTunnelGroupName_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Huawei_GetsVendor(p, 96) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func HWTunnelGroupName_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Huawei_GetsVendor(p, 96) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func HWTunnelGroupName_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Huawei_LookupVendor(p, 96)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func HWTunnelGroupName_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Huawei_LookupVendor(p, 96)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func HWTunnelGroupName_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Huawei_SetVendor(p, 96, a)
}

func HWTunnelGroupName_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Huawei_SetVendor(p, 96, a)
}

func HWTunnelGroupName_Del(p *radius.Packet) {
	_Huawei_DelVendor(p, 96)
}

func HWMulticastSourceGroup_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Huawei_AddVendor(p, 97, a)
}

func HWMulticastSourceGroup_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Huawei_AddVendor(p, 97, a)
}

func HWMulticastSourceGroup_Get(p *radius.Packet) (value []byte) {
	value, _ = HWMulticastSourceGroup_Lookup(p)
	return
}

func HWMulticastSourceGroup_GetString(p *radius.Packet) (value string) {
	value, _ = HWMulticastSourceGroup_LookupString(p)
	return
}

func HWMulticastSourceGroup_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Huawei_GetsVendor(p, 97) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func HWMulticastSourceGroup_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Huawei_GetsVendor(p, 97) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func HWMulticastSourceGroup_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Huawei_LookupVendor(p, 97)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func HWMulticastSourceGroup_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Huawei_LookupVendor(p, 97)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func HWMulticastSourceGroup_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Huawei_SetVendor(p, 97, a)
}

func HWMulticastSourceGroup_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Huawei_SetVendor(p, 97, a)
}

func HWMulticastSourceGroup_Del(p *radius.Packet) {
	_Huawei_DelVendor(p, 97)
}

func HWMulticastReceiveGroup_Add(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPAddr(value)
	if err != nil {
		return
	}
	return _Huawei_AddVendor(p, 98, a)
}

func HWMulticastReceiveGroup_Get(p *radius.Packet) (value net.IP) {
	value, _ = HWMulticastReceiveGroup_Lookup(p)
	return
}

func HWMulticastReceiveGroup_Gets(p *radius.Packet) (values []net.IP, err error) {
	var i net.IP
	for _, attr := range _Huawei_GetsVendor(p, 98) {
		i, err = radius.IPAddr(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func HWMulticastReceiveGroup_Lookup(p *radius.Packet) (value net.IP, err error) {
	a, ok := _Huawei_LookupVendor(p, 98)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value, err = radius.IPAddr(a)
	return
}

func HWMulticastReceiveGroup_Set(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPAddr(value)
	if err != nil {
		return
	}
	return _Huawei_SetVendor(p, 98, a)
}

func HWMulticastReceiveGroup_Del(p *radius.Packet) {
	_Huawei_DelVendor(p, 98)
}

type HWUserMulticastType uint32

var HWUserMulticastType_Strings = map[HWUserMulticastType]string{}

func (a HWUserMulticastType) String() string {
	if str, ok := HWUserMulticastType_Strings[a]; ok {
		return str
	}
	return "HWUserMulticastType(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func HWUserMulticastType_Add(p *radius.Packet, value HWUserMulticastType) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Huawei_AddVendor(p, 99, a)
}

func HWUserMulticastType_Get(p *radius.Packet) (value HWUserMulticastType) {
	value, _ = HWUserMulticastType_Lookup(p)
	return
}

func HWUserMulticastType_Gets(p *radius.Packet) (values []HWUserMulticastType, err error) {
	var i uint32
	for _, attr := range _Huawei_GetsVendor(p, 99) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, HWUserMulticastType(i))
	}
	return
}

func HWUserMulticastType_Lookup(p *radius.Packet) (value HWUserMulticastType, err error) {
	a, ok := _Huawei_LookupVendor(p, 99)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = HWUserMulticastType(i)
	return
}

func HWUserMulticastType_Set(p *radius.Packet, value HWUserMulticastType) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Huawei_SetVendor(p, 99, a)
}

func HWUserMulticastType_Del(p *radius.Packet) {
	_Huawei_DelVendor(p, 99)
}

type HWReducedPIR uint32

var HWReducedPIR_Strings = map[HWReducedPIR]string{}

func (a HWReducedPIR) String() string {
	if str, ok := HWReducedPIR_Strings[a]; ok {
		return str
	}
	return "HWReducedPIR(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func HWReducedPIR_Add(p *radius.Packet, value HWReducedPIR) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Huawei_AddVendor(p, 100, a)
}

func HWReducedPIR_Get(p *radius.Packet) (value HWReducedPIR) {
	value, _ = HWReducedPIR_Lookup(p)
	return
}

func HWReducedPIR_Gets(p *radius.Packet) (values []HWReducedPIR, err error) {
	var i uint32
	for _, attr := range _Huawei_GetsVendor(p, 100) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, HWReducedPIR(i))
	}
	return
}

func HWReducedPIR_Lookup(p *radius.Packet) (value HWReducedPIR, err error) {
	a, ok := _Huawei_LookupVendor(p, 100)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = HWReducedPIR(i)
	return
}

func HWReducedPIR_Set(p *radius.Packet, value HWReducedPIR) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Huawei_SetVendor(p, 100, a)
}

func HWReducedPIR_Del(p *radius.Packet) {
	_Huawei_DelVendor(p, 100)
}

func HWLIID_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Huawei_AddVendor(p, 101, a)
}

func HWLIID_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Huawei_AddVendor(p, 101, a)
}

func HWLIID_Get(p *radius.Packet) (value []byte) {
	value, _ = HWLIID_Lookup(p)
	return
}

func HWLIID_GetString(p *radius.Packet) (value string) {
	value, _ = HWLIID_LookupString(p)
	return
}

func HWLIID_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Huawei_GetsVendor(p, 101) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func HWLIID_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Huawei_GetsVendor(p, 101) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func HWLIID_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Huawei_LookupVendor(p, 101)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func HWLIID_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Huawei_LookupVendor(p, 101)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func HWLIID_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Huawei_SetVendor(p, 101, a)
}

func HWLIID_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Huawei_SetVendor(p, 101, a)
}

func HWLIID_Del(p *radius.Packet) {
	_Huawei_DelVendor(p, 101)
}

func HWLIMdAddress_Add(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPAddr(value)
	if err != nil {
		return
	}
	return _Huawei_AddVendor(p, 102, a)
}

func HWLIMdAddress_Get(p *radius.Packet) (value net.IP) {
	value, _ = HWLIMdAddress_Lookup(p)
	return
}

func HWLIMdAddress_Gets(p *radius.Packet) (values []net.IP, err error) {
	var i net.IP
	for _, attr := range _Huawei_GetsVendor(p, 102) {
		i, err = radius.IPAddr(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func HWLIMdAddress_Lookup(p *radius.Packet) (value net.IP, err error) {
	a, ok := _Huawei_LookupVendor(p, 102)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value, err = radius.IPAddr(a)
	return
}

func HWLIMdAddress_Set(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPAddr(value)
	if err != nil {
		return
	}
	return _Huawei_SetVendor(p, 102, a)
}

func HWLIMdAddress_Del(p *radius.Packet) {
	_Huawei_DelVendor(p, 102)
}

type HWLIMdPort uint32

var HWLIMdPort_Strings = map[HWLIMdPort]string{}

func (a HWLIMdPort) String() string {
	if str, ok := HWLIMdPort_Strings[a]; ok {
		return str
	}
	return "HWLIMdPort(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func HWLIMdPort_Add(p *radius.Packet, value HWLIMdPort) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Huawei_AddVendor(p, 103, a)
}

func HWLIMdPort_Get(p *radius.Packet) (value HWLIMdPort) {
	value, _ = HWLIMdPort_Lookup(p)
	return
}

func HWLIMdPort_Gets(p *radius.Packet) (values []HWLIMdPort, err error) {
	var i uint32
	for _, attr := range _Huawei_GetsVendor(p, 103) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, HWLIMdPort(i))
	}
	return
}

func HWLIMdPort_Lookup(p *radius.Packet) (value HWLIMdPort, err error) {
	a, ok := _Huawei_LookupVendor(p, 103)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = HWLIMdPort(i)
	return
}

func HWLIMdPort_Set(p *radius.Packet, value HWLIMdPort) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Huawei_SetVendor(p, 103, a)
}

func HWLIMdPort_Del(p *radius.Packet) {
	_Huawei_DelVendor(p, 103)
}

func HWLIMdVpnInstance_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Huawei_AddVendor(p, 104, a)
}

func HWLIMdVpnInstance_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Huawei_AddVendor(p, 104, a)
}

func HWLIMdVpnInstance_Get(p *radius.Packet) (value []byte) {
	value, _ = HWLIMdVpnInstance_Lookup(p)
	return
}

func HWLIMdVpnInstance_GetString(p *radius.Packet) (value string) {
	value, _ = HWLIMdVpnInstance_LookupString(p)
	return
}

func HWLIMdVpnInstance_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Huawei_GetsVendor(p, 104) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func HWLIMdVpnInstance_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Huawei_GetsVendor(p, 104) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func HWLIMdVpnInstance_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Huawei_LookupVendor(p, 104)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func HWLIMdVpnInstance_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Huawei_LookupVendor(p, 104)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func HWLIMdVpnInstance_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Huawei_SetVendor(p, 104, a)
}

func HWLIMdVpnInstance_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Huawei_SetVendor(p, 104, a)
}

func HWLIMdVpnInstance_Del(p *radius.Packet) {
	_Huawei_DelVendor(p, 104)
}

type HWServiceChgCmd uint32

var HWServiceChgCmd_Strings = map[HWServiceChgCmd]string{}

func (a HWServiceChgCmd) String() string {
	if str, ok := HWServiceChgCmd_Strings[a]; ok {
		return str
	}
	return "HWServiceChgCmd(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func HWServiceChgCmd_Add(p *radius.Packet, value HWServiceChgCmd) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Huawei_AddVendor(p, 105, a)
}

func HWServiceChgCmd_Get(p *radius.Packet) (value HWServiceChgCmd) {
	value, _ = HWServiceChgCmd_Lookup(p)
	return
}

func HWServiceChgCmd_Gets(p *radius.Packet) (values []HWServiceChgCmd, err error) {
	var i uint32
	for _, attr := range _Huawei_GetsVendor(p, 105) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, HWServiceChgCmd(i))
	}
	return
}

func HWServiceChgCmd_Lookup(p *radius.Packet) (value HWServiceChgCmd, err error) {
	a, ok := _Huawei_LookupVendor(p, 105)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = HWServiceChgCmd(i)
	return
}

func HWServiceChgCmd_Set(p *radius.Packet, value HWServiceChgCmd) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Huawei_SetVendor(p, 105, a)
}

func HWServiceChgCmd_Del(p *radius.Packet) {
	_Huawei_DelVendor(p, 105)
}

type HWAcctPacketType uint32

var HWAcctPacketType_Strings = map[HWAcctPacketType]string{}

func (a HWAcctPacketType) String() string {
	if str, ok := HWAcctPacketType_Strings[a]; ok {
		return str
	}
	return "HWAcctPacketType(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func HWAcctPacketType_Add(p *radius.Packet, value HWAcctPacketType) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Huawei_AddVendor(p, 106, a)
}

func HWAcctPacketType_Get(p *radius.Packet) (value HWAcctPacketType) {
	value, _ = HWAcctPacketType_Lookup(p)
	return
}

func HWAcctPacketType_Gets(p *radius.Packet) (values []HWAcctPacketType, err error) {
	var i uint32
	for _, attr := range _Huawei_GetsVendor(p, 106) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, HWAcctPacketType(i))
	}
	return
}

func HWAcctPacketType_Lookup(p *radius.Packet) (value HWAcctPacketType, err error) {
	a, ok := _Huawei_LookupVendor(p, 106)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = HWAcctPacketType(i)
	return
}

func HWAcctPacketType_Set(p *radius.Packet, value HWAcctPacketType) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Huawei_SetVendor(p, 106, a)
}

func HWAcctPacketType_Del(p *radius.Packet) {
	_Huawei_DelVendor(p, 106)
}

type HWCallReference uint32

var HWCallReference_Strings = map[HWCallReference]string{}

func (a HWCallReference) String() string {
	if str, ok := HWCallReference_Strings[a]; ok {
		return str
	}
	return "HWCallReference(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func HWCallReference_Add(p *radius.Packet, value HWCallReference) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Huawei_AddVendor(p, 107, a)
}

func HWCallReference_Get(p *radius.Packet) (value HWCallReference) {
	value, _ = HWCallReference_Lookup(p)
	return
}

func HWCallReference_Gets(p *radius.Packet) (values []HWCallReference, err error) {
	var i uint32
	for _, attr := range _Huawei_GetsVendor(p, 107) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, HWCallReference(i))
	}
	return
}

func HWCallReference_Lookup(p *radius.Packet) (value HWCallReference, err error) {
	a, ok := _Huawei_LookupVendor(p, 107)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = HWCallReference(i)
	return
}

func HWCallReference_Set(p *radius.Packet, value HWCallReference) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Huawei_SetVendor(p, 107, a)
}

func HWCallReference_Del(p *radius.Packet) {
	_Huawei_DelVendor(p, 107)
}

type HWPSTNPort uint32

var HWPSTNPort_Strings = map[HWPSTNPort]string{}

func (a HWPSTNPort) String() string {
	if str, ok := HWPSTNPort_Strings[a]; ok {
		return str
	}
	return "HWPSTNPort(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func HWPSTNPort_Add(p *radius.Packet, value HWPSTNPort) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Huawei_AddVendor(p, 108, a)
}

func HWPSTNPort_Get(p *radius.Packet) (value HWPSTNPort) {
	value, _ = HWPSTNPort_Lookup(p)
	return
}

func HWPSTNPort_Gets(p *radius.Packet) (values []HWPSTNPort, err error) {
	var i uint32
	for _, attr := range _Huawei_GetsVendor(p, 108) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, HWPSTNPort(i))
	}
	return
}

func HWPSTNPort_Lookup(p *radius.Packet) (value HWPSTNPort, err error) {
	a, ok := _Huawei_LookupVendor(p, 108)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = HWPSTNPort(i)
	return
}

func HWPSTNPort_Set(p *radius.Packet, value HWPSTNPort) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Huawei_SetVendor(p, 108, a)
}

func HWPSTNPort_Del(p *radius.Packet) {
	_Huawei_DelVendor(p, 108)
}

type HWVoipServiceType uint32

var HWVoipServiceType_Strings = map[HWVoipServiceType]string{}

func (a HWVoipServiceType) String() string {
	if str, ok := HWVoipServiceType_Strings[a]; ok {
		return str
	}
	return "HWVoipServiceType(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func HWVoipServiceType_Add(p *radius.Packet, value HWVoipServiceType) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Huawei_AddVendor(p, 109, a)
}

func HWVoipServiceType_Get(p *radius.Packet) (value HWVoipServiceType) {
	value, _ = HWVoipServiceType_Lookup(p)
	return
}

func HWVoipServiceType_Gets(p *radius.Packet) (values []HWVoipServiceType, err error) {
	var i uint32
	for _, attr := range _Huawei_GetsVendor(p, 109) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, HWVoipServiceType(i))
	}
	return
}

func HWVoipServiceType_Lookup(p *radius.Packet) (value HWVoipServiceType, err error) {
	a, ok := _Huawei_LookupVendor(p, 109)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = HWVoipServiceType(i)
	return
}

func HWVoipServiceType_Set(p *radius.Packet, value HWVoipServiceType) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Huawei_SetVendor(p, 109, a)
}

func HWVoipServiceType_Del(p *radius.Packet) {
	_Huawei_DelVendor(p, 109)
}

type HWAcctConnectionTime uint32

var HWAcctConnectionTime_Strings = map[HWAcctConnectionTime]string{}

func (a HWAcctConnectionTime) String() string {
	if str, ok := HWAcctConnectionTime_Strings[a]; ok {
		return str
	}
	return "HWAcctConnectionTime(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func HWAcctConnectionTime_Add(p *radius.Packet, value HWAcctConnectionTime) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Huawei_AddVendor(p, 110, a)
}

func HWAcctConnectionTime_Get(p *radius.Packet) (value HWAcctConnectionTime) {
	value, _ = HWAcctConnectionTime_Lookup(p)
	return
}

func HWAcctConnectionTime_Gets(p *radius.Packet) (values []HWAcctConnectionTime, err error) {
	var i uint32
	for _, attr := range _Huawei_GetsVendor(p, 110) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, HWAcctConnectionTime(i))
	}
	return
}

func HWAcctConnectionTime_Lookup(p *radius.Packet) (value HWAcctConnectionTime, err error) {
	a, ok := _Huawei_LookupVendor(p, 110)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = HWAcctConnectionTime(i)
	return
}

func HWAcctConnectionTime_Set(p *radius.Packet, value HWAcctConnectionTime) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Huawei_SetVendor(p, 110, a)
}

func HWAcctConnectionTime_Del(p *radius.Packet) {
	_Huawei_DelVendor(p, 110)
}

type HWErrorReason uint32

var HWErrorReason_Strings = map[HWErrorReason]string{}

func (a HWErrorReason) String() string {
	if str, ok := HWErrorReason_Strings[a]; ok {
		return str
	}
	return "HWErrorReason(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func HWErrorReason_Add(p *radius.Packet, value HWErrorReason) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Huawei_AddVendor(p, 112, a)
}

func HWErrorReason_Get(p *radius.Packet) (value HWErrorReason) {
	value, _ = HWErrorReason_Lookup(p)
	return
}

func HWErrorReason_Gets(p *radius.Packet) (values []HWErrorReason, err error) {
	var i uint32
	for _, attr := range _Huawei_GetsVendor(p, 112) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, HWErrorReason(i))
	}
	return
}

func HWErrorReason_Lookup(p *radius.Packet) (value HWErrorReason, err error) {
	a, ok := _Huawei_LookupVendor(p, 112)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = HWErrorReason(i)
	return
}

func HWErrorReason_Set(p *radius.Packet, value HWErrorReason) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Huawei_SetVendor(p, 112, a)
}

func HWErrorReason_Del(p *radius.Packet) {
	_Huawei_DelVendor(p, 112)
}

type HWRemainMonney uint32

var HWRemainMonney_Strings = map[HWRemainMonney]string{}

func (a HWRemainMonney) String() string {
	if str, ok := HWRemainMonney_Strings[a]; ok {
		return str
	}
	return "HWRemainMonney(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func HWRemainMonney_Add(p *radius.Packet, value HWRemainMonney) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Huawei_AddVendor(p, 113, a)
}

func HWRemainMonney_Get(p *radius.Packet) (value HWRemainMonney) {
	value, _ = HWRemainMonney_Lookup(p)
	return
}

func HWRemainMonney_Gets(p *radius.Packet) (values []HWRemainMonney, err error) {
	var i uint32
	for _, attr := range _Huawei_GetsVendor(p, 113) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, HWRemainMonney(i))
	}
	return
}

func HWRemainMonney_Lookup(p *radius.Packet) (value HWRemainMonney, err error) {
	a, ok := _Huawei_LookupVendor(p, 113)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = HWRemainMonney(i)
	return
}

func HWRemainMonney_Set(p *radius.Packet, value HWRemainMonney) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Huawei_SetVendor(p, 113, a)
}

func HWRemainMonney_Del(p *radius.Packet) {
	_Huawei_DelVendor(p, 113)
}

func HWOrgGKIpaddr_Add(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPAddr(value)
	if err != nil {
		return
	}
	return _Huawei_AddVendor(p, 123, a)
}

func HWOrgGKIpaddr_Get(p *radius.Packet) (value net.IP) {
	value, _ = HWOrgGKIpaddr_Lookup(p)
	return
}

func HWOrgGKIpaddr_Gets(p *radius.Packet) (values []net.IP, err error) {
	var i net.IP
	for _, attr := range _Huawei_GetsVendor(p, 123) {
		i, err = radius.IPAddr(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func HWOrgGKIpaddr_Lookup(p *radius.Packet) (value net.IP, err error) {
	a, ok := _Huawei_LookupVendor(p, 123)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value, err = radius.IPAddr(a)
	return
}

func HWOrgGKIpaddr_Set(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPAddr(value)
	if err != nil {
		return
	}
	return _Huawei_SetVendor(p, 123, a)
}

func HWOrgGKIpaddr_Del(p *radius.Packet) {
	_Huawei_DelVendor(p, 123)
}

func HWOrgGWIpaddr_Add(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPAddr(value)
	if err != nil {
		return
	}
	return _Huawei_AddVendor(p, 124, a)
}

func HWOrgGWIpaddr_Get(p *radius.Packet) (value net.IP) {
	value, _ = HWOrgGWIpaddr_Lookup(p)
	return
}

func HWOrgGWIpaddr_Gets(p *radius.Packet) (values []net.IP, err error) {
	var i net.IP
	for _, attr := range _Huawei_GetsVendor(p, 124) {
		i, err = radius.IPAddr(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func HWOrgGWIpaddr_Lookup(p *radius.Packet) (value net.IP, err error) {
	a, ok := _Huawei_LookupVendor(p, 124)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value, err = radius.IPAddr(a)
	return
}

func HWOrgGWIpaddr_Set(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPAddr(value)
	if err != nil {
		return
	}
	return _Huawei_SetVendor(p, 124, a)
}

func HWOrgGWIpaddr_Del(p *radius.Packet) {
	_Huawei_DelVendor(p, 124)
}

func HWDstGKIpaddr_Add(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPAddr(value)
	if err != nil {
		return
	}
	return _Huawei_AddVendor(p, 125, a)
}

func HWDstGKIpaddr_Get(p *radius.Packet) (value net.IP) {
	value, _ = HWDstGKIpaddr_Lookup(p)
	return
}

func HWDstGKIpaddr_Gets(p *radius.Packet) (values []net.IP, err error) {
	var i net.IP
	for _, attr := range _Huawei_GetsVendor(p, 125) {
		i, err = radius.IPAddr(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func HWDstGKIpaddr_Lookup(p *radius.Packet) (value net.IP, err error) {
	a, ok := _Huawei_LookupVendor(p, 125)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value, err = radius.IPAddr(a)
	return
}

func HWDstGKIpaddr_Set(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPAddr(value)
	if err != nil {
		return
	}
	return _Huawei_SetVendor(p, 125, a)
}

func HWDstGKIpaddr_Del(p *radius.Packet) {
	_Huawei_DelVendor(p, 125)
}

func HWDstGWIpaddr_Add(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPAddr(value)
	if err != nil {
		return
	}
	return _Huawei_AddVendor(p, 126, a)
}

func HWDstGWIpaddr_Get(p *radius.Packet) (value net.IP) {
	value, _ = HWDstGWIpaddr_Lookup(p)
	return
}

func HWDstGWIpaddr_Gets(p *radius.Packet) (values []net.IP, err error) {
	var i net.IP
	for _, attr := range _Huawei_GetsVendor(p, 126) {
		i, err = radius.IPAddr(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func HWDstGWIpaddr_Lookup(p *radius.Packet) (value net.IP, err error) {
	a, ok := _Huawei_LookupVendor(p, 126)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value, err = radius.IPAddr(a)
	return
}

func HWDstGWIpaddr_Set(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPAddr(value)
	if err != nil {
		return
	}
	return _Huawei_SetVendor(p, 126, a)
}

func HWDstGWIpaddr_Del(p *radius.Packet) {
	_Huawei_DelVendor(p, 126)
}

func HWAccessNum_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Huawei_AddVendor(p, 127, a)
}

func HWAccessNum_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Huawei_AddVendor(p, 127, a)
}

func HWAccessNum_Get(p *radius.Packet) (value []byte) {
	value, _ = HWAccessNum_Lookup(p)
	return
}

func HWAccessNum_GetString(p *radius.Packet) (value string) {
	value, _ = HWAccessNum_LookupString(p)
	return
}

func HWAccessNum_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Huawei_GetsVendor(p, 127) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func HWAccessNum_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Huawei_GetsVendor(p, 127) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func HWAccessNum_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Huawei_LookupVendor(p, 127)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func HWAccessNum_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Huawei_LookupVendor(p, 127)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func HWAccessNum_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Huawei_SetVendor(p, 127, a)
}

func HWAccessNum_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Huawei_SetVendor(p, 127, a)
}

func HWAccessNum_Del(p *radius.Packet) {
	_Huawei_DelVendor(p, 127)
}

type HWRemainTime uint32

var HWRemainTime_Strings = map[HWRemainTime]string{}

func (a HWRemainTime) String() string {
	if str, ok := HWRemainTime_Strings[a]; ok {
		return str
	}
	return "HWRemainTime(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func HWRemainTime_Add(p *radius.Packet, value HWRemainTime) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Huawei_AddVendor(p, 128, a)
}

func HWRemainTime_Get(p *radius.Packet) (value HWRemainTime) {
	value, _ = HWRemainTime_Lookup(p)
	return
}

func HWRemainTime_Gets(p *radius.Packet) (values []HWRemainTime, err error) {
	var i uint32
	for _, attr := range _Huawei_GetsVendor(p, 128) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, HWRemainTime(i))
	}
	return
}

func HWRemainTime_Lookup(p *radius.Packet) (value HWRemainTime, err error) {
	a, ok := _Huawei_LookupVendor(p, 128)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = HWRemainTime(i)
	return
}

func HWRemainTime_Set(p *radius.Packet, value HWRemainTime) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Huawei_SetVendor(p, 128, a)
}

func HWRemainTime_Del(p *radius.Packet) {
	_Huawei_DelVendor(p, 128)
}

type HWCodecType uint32

var HWCodecType_Strings = map[HWCodecType]string{}

func (a HWCodecType) String() string {
	if str, ok := HWCodecType_Strings[a]; ok {
		return str
	}
	return "HWCodecType(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func HWCodecType_Add(p *radius.Packet, value HWCodecType) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Huawei_AddVendor(p, 131, a)
}

func HWCodecType_Get(p *radius.Packet) (value HWCodecType) {
	value, _ = HWCodecType_Lookup(p)
	return
}

func HWCodecType_Gets(p *radius.Packet) (values []HWCodecType, err error) {
	var i uint32
	for _, attr := range _Huawei_GetsVendor(p, 131) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, HWCodecType(i))
	}
	return
}

func HWCodecType_Lookup(p *radius.Packet) (value HWCodecType, err error) {
	a, ok := _Huawei_LookupVendor(p, 131)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = HWCodecType(i)
	return
}

func HWCodecType_Set(p *radius.Packet, value HWCodecType) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Huawei_SetVendor(p, 131, a)
}

func HWCodecType_Del(p *radius.Packet) {
	_Huawei_DelVendor(p, 131)
}

func HWTransferNum_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Huawei_AddVendor(p, 132, a)
}

func HWTransferNum_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Huawei_AddVendor(p, 132, a)
}

func HWTransferNum_Get(p *radius.Packet) (value []byte) {
	value, _ = HWTransferNum_Lookup(p)
	return
}

func HWTransferNum_GetString(p *radius.Packet) (value string) {
	value, _ = HWTransferNum_LookupString(p)
	return
}

func HWTransferNum_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Huawei_GetsVendor(p, 132) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func HWTransferNum_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Huawei_GetsVendor(p, 132) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func HWTransferNum_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Huawei_LookupVendor(p, 132)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func HWTransferNum_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Huawei_LookupVendor(p, 132)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func HWTransferNum_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Huawei_SetVendor(p, 132, a)
}

func HWTransferNum_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Huawei_SetVendor(p, 132, a)
}

func HWTransferNum_Del(p *radius.Packet) {
	_Huawei_DelVendor(p, 132)
}

func HWNewUserName_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Huawei_AddVendor(p, 133, a)
}

func HWNewUserName_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Huawei_AddVendor(p, 133, a)
}

func HWNewUserName_Get(p *radius.Packet) (value []byte) {
	value, _ = HWNewUserName_Lookup(p)
	return
}

func HWNewUserName_GetString(p *radius.Packet) (value string) {
	value, _ = HWNewUserName_LookupString(p)
	return
}

func HWNewUserName_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Huawei_GetsVendor(p, 133) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func HWNewUserName_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Huawei_GetsVendor(p, 133) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func HWNewUserName_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Huawei_LookupVendor(p, 133)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func HWNewUserName_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Huawei_LookupVendor(p, 133)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func HWNewUserName_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Huawei_SetVendor(p, 133, a)
}

func HWNewUserName_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Huawei_SetVendor(p, 133, a)
}

func HWNewUserName_Del(p *radius.Packet) {
	_Huawei_DelVendor(p, 133)
}

func HWTransferStationID_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Huawei_AddVendor(p, 134, a)
}

func HWTransferStationID_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Huawei_AddVendor(p, 134, a)
}

func HWTransferStationID_Get(p *radius.Packet) (value []byte) {
	value, _ = HWTransferStationID_Lookup(p)
	return
}

func HWTransferStationID_GetString(p *radius.Packet) (value string) {
	value, _ = HWTransferStationID_LookupString(p)
	return
}

func HWTransferStationID_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Huawei_GetsVendor(p, 134) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func HWTransferStationID_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Huawei_GetsVendor(p, 134) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func HWTransferStationID_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Huawei_LookupVendor(p, 134)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func HWTransferStationID_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Huawei_LookupVendor(p, 134)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func HWTransferStationID_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Huawei_SetVendor(p, 134, a)
}

func HWTransferStationID_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Huawei_SetVendor(p, 134, a)
}

func HWTransferStationID_Del(p *radius.Packet) {
	_Huawei_DelVendor(p, 134)
}

func HWPrimaryDNS_Add(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPAddr(value)
	if err != nil {
		return
	}
	return _Huawei_AddVendor(p, 135, a)
}

func HWPrimaryDNS_Get(p *radius.Packet) (value net.IP) {
	value, _ = HWPrimaryDNS_Lookup(p)
	return
}

func HWPrimaryDNS_Gets(p *radius.Packet) (values []net.IP, err error) {
	var i net.IP
	for _, attr := range _Huawei_GetsVendor(p, 135) {
		i, err = radius.IPAddr(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func HWPrimaryDNS_Lookup(p *radius.Packet) (value net.IP, err error) {
	a, ok := _Huawei_LookupVendor(p, 135)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value, err = radius.IPAddr(a)
	return
}

func HWPrimaryDNS_Set(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPAddr(value)
	if err != nil {
		return
	}
	return _Huawei_SetVendor(p, 135, a)
}

func HWPrimaryDNS_Del(p *radius.Packet) {
	_Huawei_DelVendor(p, 135)
}

func HWSecondaryDNS_Add(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPAddr(value)
	if err != nil {
		return
	}
	return _Huawei_AddVendor(p, 136, a)
}

func HWSecondaryDNS_Get(p *radius.Packet) (value net.IP) {
	value, _ = HWSecondaryDNS_Lookup(p)
	return
}

func HWSecondaryDNS_Gets(p *radius.Packet) (values []net.IP, err error) {
	var i net.IP
	for _, attr := range _Huawei_GetsVendor(p, 136) {
		i, err = radius.IPAddr(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func HWSecondaryDNS_Lookup(p *radius.Packet) (value net.IP, err error) {
	a, ok := _Huawei_LookupVendor(p, 136)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value, err = radius.IPAddr(a)
	return
}

func HWSecondaryDNS_Set(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPAddr(value)
	if err != nil {
		return
	}
	return _Huawei_SetVendor(p, 136, a)
}

func HWSecondaryDNS_Del(p *radius.Packet) {
	_Huawei_DelVendor(p, 136)
}

type HWONLYAccountType uint32

var HWONLYAccountType_Strings = map[HWONLYAccountType]string{}

func (a HWONLYAccountType) String() string {
	if str, ok := HWONLYAccountType_Strings[a]; ok {
		return str
	}
	return "HWONLYAccountType(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func HWONLYAccountType_Add(p *radius.Packet, value HWONLYAccountType) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Huawei_AddVendor(p, 137, a)
}

func HWONLYAccountType_Get(p *radius.Packet) (value HWONLYAccountType) {
	value, _ = HWONLYAccountType_Lookup(p)
	return
}

func HWONLYAccountType_Gets(p *radius.Packet) (values []HWONLYAccountType, err error) {
	var i uint32
	for _, attr := range _Huawei_GetsVendor(p, 137) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, HWONLYAccountType(i))
	}
	return
}

func HWONLYAccountType_Lookup(p *radius.Packet) (value HWONLYAccountType, err error) {
	a, ok := _Huawei_LookupVendor(p, 137)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = HWONLYAccountType(i)
	return
}

func HWONLYAccountType_Set(p *radius.Packet, value HWONLYAccountType) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Huawei_SetVendor(p, 137, a)
}

func HWONLYAccountType_Del(p *radius.Packet) {
	_Huawei_DelVendor(p, 137)
}

func HWDomainName_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Huawei_AddVendor(p, 138, a)
}

func HWDomainName_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Huawei_AddVendor(p, 138, a)
}

func HWDomainName_Get(p *radius.Packet) (value []byte) {
	value, _ = HWDomainName_Lookup(p)
	return
}

func HWDomainName_GetString(p *radius.Packet) (value string) {
	value, _ = HWDomainName_LookupString(p)
	return
}

func HWDomainName_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Huawei_GetsVendor(p, 138) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func HWDomainName_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Huawei_GetsVendor(p, 138) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func HWDomainName_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Huawei_LookupVendor(p, 138)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func HWDomainName_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Huawei_LookupVendor(p, 138)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func HWDomainName_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Huawei_SetVendor(p, 138, a)
}

func HWDomainName_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Huawei_SetVendor(p, 138, a)
}

func HWDomainName_Del(p *radius.Packet) {
	_Huawei_DelVendor(p, 138)
}

func HWANCPProfile_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Huawei_AddVendor(p, 139, a)
}

func HWANCPProfile_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Huawei_AddVendor(p, 139, a)
}

func HWANCPProfile_Get(p *radius.Packet) (value []byte) {
	value, _ = HWANCPProfile_Lookup(p)
	return
}

func HWANCPProfile_GetString(p *radius.Packet) (value string) {
	value, _ = HWANCPProfile_LookupString(p)
	return
}

func HWANCPProfile_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Huawei_GetsVendor(p, 139) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func HWANCPProfile_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Huawei_GetsVendor(p, 139) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func HWANCPProfile_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Huawei_LookupVendor(p, 139)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func HWANCPProfile_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Huawei_LookupVendor(p, 139)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func HWANCPProfile_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Huawei_SetVendor(p, 139, a)
}

func HWANCPProfile_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Huawei_SetVendor(p, 139, a)
}

func HWANCPProfile_Del(p *radius.Packet) {
	_Huawei_DelVendor(p, 139)
}

func HWHTTPRedirectURL_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Huawei_AddVendor(p, 140, a)
}

func HWHTTPRedirectURL_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Huawei_AddVendor(p, 140, a)
}

func HWHTTPRedirectURL_Get(p *radius.Packet) (value []byte) {
	value, _ = HWHTTPRedirectURL_Lookup(p)
	return
}

func HWHTTPRedirectURL_GetString(p *radius.Packet) (value string) {
	value, _ = HWHTTPRedirectURL_LookupString(p)
	return
}

func HWHTTPRedirectURL_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Huawei_GetsVendor(p, 140) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func HWHTTPRedirectURL_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Huawei_GetsVendor(p, 140) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func HWHTTPRedirectURL_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Huawei_LookupVendor(p, 140)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func HWHTTPRedirectURL_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Huawei_LookupVendor(p, 140)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func HWHTTPRedirectURL_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Huawei_SetVendor(p, 140, a)
}

func HWHTTPRedirectURL_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Huawei_SetVendor(p, 140, a)
}

func HWHTTPRedirectURL_Del(p *radius.Packet) {
	_Huawei_DelVendor(p, 140)
}

func HWLoopbackAddress_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Huawei_AddVendor(p, 141, a)
}

func HWLoopbackAddress_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Huawei_AddVendor(p, 141, a)
}

func HWLoopbackAddress_Get(p *radius.Packet) (value []byte) {
	value, _ = HWLoopbackAddress_Lookup(p)
	return
}

func HWLoopbackAddress_GetString(p *radius.Packet) (value string) {
	value, _ = HWLoopbackAddress_LookupString(p)
	return
}

func HWLoopbackAddress_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Huawei_GetsVendor(p, 141) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func HWLoopbackAddress_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Huawei_GetsVendor(p, 141) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func HWLoopbackAddress_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Huawei_LookupVendor(p, 141)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func HWLoopbackAddress_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Huawei_LookupVendor(p, 141)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func HWLoopbackAddress_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Huawei_SetVendor(p, 141, a)
}

func HWLoopbackAddress_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Huawei_SetVendor(p, 141, a)
}

func HWLoopbackAddress_Del(p *radius.Packet) {
	_Huawei_DelVendor(p, 141)
}

type HWQoSProfileType uint32

const (
	HWQoSProfileType_Value_Original     HWQoSProfileType = 0
	HWQoSProfileType_Value_L2TPInbound  HWQoSProfileType = 1
	HWQoSProfileType_Value_L2TPOutbound HWQoSProfileType = 2
	HWQoSProfileType_Value_L2TP         HWQoSProfileType = 3
)

var HWQoSProfileType_Strings = map[HWQoSProfileType]string{
	HWQoSProfileType_Value_Original:     "Original",
	HWQoSProfileType_Value_L2TPInbound:  "L2TP-Inbound",
	HWQoSProfileType_Value_L2TPOutbound: "L2TP-Outbound",
	HWQoSProfileType_Value_L2TP:         "L2TP",
}

func (a HWQoSProfileType) String() string {
	if str, ok := HWQoSProfileType_Strings[a]; ok {
		return str
	}
	return "HWQoSProfileType(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func HWQoSProfileType_Add(p *radius.Packet, value HWQoSProfileType) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Huawei_AddVendor(p, 142, a)
}

func HWQoSProfileType_Get(p *radius.Packet) (value HWQoSProfileType) {
	value, _ = HWQoSProfileType_Lookup(p)
	return
}

func HWQoSProfileType_Gets(p *radius.Packet) (values []HWQoSProfileType, err error) {
	var i uint32
	for _, attr := range _Huawei_GetsVendor(p, 142) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, HWQoSProfileType(i))
	}
	return
}

func HWQoSProfileType_Lookup(p *radius.Packet) (value HWQoSProfileType, err error) {
	a, ok := _Huawei_LookupVendor(p, 142)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = HWQoSProfileType(i)
	return
}

func HWQoSProfileType_Set(p *radius.Packet, value HWQoSProfileType) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Huawei_SetVendor(p, 142, a)
}

func HWQoSProfileType_Del(p *radius.Packet) {
	_Huawei_DelVendor(p, 142)
}

type HWMaxListNum uint32

var HWMaxListNum_Strings = map[HWMaxListNum]string{}

func (a HWMaxListNum) String() string {
	if str, ok := HWMaxListNum_Strings[a]; ok {
		return str
	}
	return "HWMaxListNum(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func HWMaxListNum_Add(p *radius.Packet, value HWMaxListNum) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Huawei_AddVendor(p, 143, a)
}

func HWMaxListNum_Get(p *radius.Packet) (value HWMaxListNum) {
	value, _ = HWMaxListNum_Lookup(p)
	return
}

func HWMaxListNum_Gets(p *radius.Packet) (values []HWMaxListNum, err error) {
	var i uint32
	for _, attr := range _Huawei_GetsVendor(p, 143) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, HWMaxListNum(i))
	}
	return
}

func HWMaxListNum_Lookup(p *radius.Packet) (value HWMaxListNum, err error) {
	a, ok := _Huawei_LookupVendor(p, 143)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = HWMaxListNum(i)
	return
}

func HWMaxListNum_Set(p *radius.Packet, value HWMaxListNum) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Huawei_SetVendor(p, 143, a)
}

func HWMaxListNum_Del(p *radius.Packet) {
	_Huawei_DelVendor(p, 143)
}

type HWAcctIPv6InputOctets uint32

var HWAcctIPv6InputOctets_Strings = map[HWAcctIPv6InputOctets]string{}

func (a HWAcctIPv6InputOctets) String() string {
	if str, ok := HWAcctIPv6InputOctets_Strings[a]; ok {
		return str
	}
	return "HWAcctIPv6InputOctets(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func HWAcctIPv6InputOctets_Add(p *radius.Packet, value HWAcctIPv6InputOctets) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Huawei_AddVendor(p, 144, a)
}

func HWAcctIPv6InputOctets_Get(p *radius.Packet) (value HWAcctIPv6InputOctets) {
	value, _ = HWAcctIPv6InputOctets_Lookup(p)
	return
}

func HWAcctIPv6InputOctets_Gets(p *radius.Packet) (values []HWAcctIPv6InputOctets, err error) {
	var i uint32
	for _, attr := range _Huawei_GetsVendor(p, 144) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, HWAcctIPv6InputOctets(i))
	}
	return
}

func HWAcctIPv6InputOctets_Lookup(p *radius.Packet) (value HWAcctIPv6InputOctets, err error) {
	a, ok := _Huawei_LookupVendor(p, 144)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = HWAcctIPv6InputOctets(i)
	return
}

func HWAcctIPv6InputOctets_Set(p *radius.Packet, value HWAcctIPv6InputOctets) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Huawei_SetVendor(p, 144, a)
}

func HWAcctIPv6InputOctets_Del(p *radius.Packet) {
	_Huawei_DelVendor(p, 144)
}

type HWAcctIPv6OutputOctets uint32

var HWAcctIPv6OutputOctets_Strings = map[HWAcctIPv6OutputOctets]string{}

func (a HWAcctIPv6OutputOctets) String() string {
	if str, ok := HWAcctIPv6OutputOctets_Strings[a]; ok {
		return str
	}
	return "HWAcctIPv6OutputOctets(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func HWAcctIPv6OutputOctets_Add(p *radius.Packet, value HWAcctIPv6OutputOctets) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Huawei_AddVendor(p, 145, a)
}

func HWAcctIPv6OutputOctets_Get(p *radius.Packet) (value HWAcctIPv6OutputOctets) {
	value, _ = HWAcctIPv6OutputOctets_Lookup(p)
	return
}

func HWAcctIPv6OutputOctets_Gets(p *radius.Packet) (values []HWAcctIPv6OutputOctets, err error) {
	var i uint32
	for _, attr := range _Huawei_GetsVendor(p, 145) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, HWAcctIPv6OutputOctets(i))
	}
	return
}

func HWAcctIPv6OutputOctets_Lookup(p *radius.Packet) (value HWAcctIPv6OutputOctets, err error) {
	a, ok := _Huawei_LookupVendor(p, 145)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = HWAcctIPv6OutputOctets(i)
	return
}

func HWAcctIPv6OutputOctets_Set(p *radius.Packet, value HWAcctIPv6OutputOctets) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Huawei_SetVendor(p, 145, a)
}

func HWAcctIPv6OutputOctets_Del(p *radius.Packet) {
	_Huawei_DelVendor(p, 145)
}

type HWAcctIPv6InputPackets uint32

var HWAcctIPv6InputPackets_Strings = map[HWAcctIPv6InputPackets]string{}

func (a HWAcctIPv6InputPackets) String() string {
	if str, ok := HWAcctIPv6InputPackets_Strings[a]; ok {
		return str
	}
	return "HWAcctIPv6InputPackets(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func HWAcctIPv6InputPackets_Add(p *radius.Packet, value HWAcctIPv6InputPackets) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Huawei_AddVendor(p, 146, a)
}

func HWAcctIPv6InputPackets_Get(p *radius.Packet) (value HWAcctIPv6InputPackets) {
	value, _ = HWAcctIPv6InputPackets_Lookup(p)
	return
}

func HWAcctIPv6InputPackets_Gets(p *radius.Packet) (values []HWAcctIPv6InputPackets, err error) {
	var i uint32
	for _, attr := range _Huawei_GetsVendor(p, 146) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, HWAcctIPv6InputPackets(i))
	}
	return
}

func HWAcctIPv6InputPackets_Lookup(p *radius.Packet) (value HWAcctIPv6InputPackets, err error) {
	a, ok := _Huawei_LookupVendor(p, 146)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = HWAcctIPv6InputPackets(i)
	return
}

func HWAcctIPv6InputPackets_Set(p *radius.Packet, value HWAcctIPv6InputPackets) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Huawei_SetVendor(p, 146, a)
}

func HWAcctIPv6InputPackets_Del(p *radius.Packet) {
	_Huawei_DelVendor(p, 146)
}

type HWAcctIPv6OutputPackets uint32

var HWAcctIPv6OutputPackets_Strings = map[HWAcctIPv6OutputPackets]string{}

func (a HWAcctIPv6OutputPackets) String() string {
	if str, ok := HWAcctIPv6OutputPackets_Strings[a]; ok {
		return str
	}
	return "HWAcctIPv6OutputPackets(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func HWAcctIPv6OutputPackets_Add(p *radius.Packet, value HWAcctIPv6OutputPackets) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Huawei_AddVendor(p, 147, a)
}

func HWAcctIPv6OutputPackets_Get(p *radius.Packet) (value HWAcctIPv6OutputPackets) {
	value, _ = HWAcctIPv6OutputPackets_Lookup(p)
	return
}

func HWAcctIPv6OutputPackets_Gets(p *radius.Packet) (values []HWAcctIPv6OutputPackets, err error) {
	var i uint32
	for _, attr := range _Huawei_GetsVendor(p, 147) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, HWAcctIPv6OutputPackets(i))
	}
	return
}

func HWAcctIPv6OutputPackets_Lookup(p *radius.Packet) (value HWAcctIPv6OutputPackets, err error) {
	a, ok := _Huawei_LookupVendor(p, 147)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = HWAcctIPv6OutputPackets(i)
	return
}

func HWAcctIPv6OutputPackets_Set(p *radius.Packet, value HWAcctIPv6OutputPackets) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Huawei_SetVendor(p, 147, a)
}

func HWAcctIPv6OutputPackets_Del(p *radius.Packet) {
	_Huawei_DelVendor(p, 147)
}

type HWAcctIPv6InputGigawords uint32

var HWAcctIPv6InputGigawords_Strings = map[HWAcctIPv6InputGigawords]string{}

func (a HWAcctIPv6InputGigawords) String() string {
	if str, ok := HWAcctIPv6InputGigawords_Strings[a]; ok {
		return str
	}
	return "HWAcctIPv6InputGigawords(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func HWAcctIPv6InputGigawords_Add(p *radius.Packet, value HWAcctIPv6InputGigawords) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Huawei_AddVendor(p, 148, a)
}

func HWAcctIPv6InputGigawords_Get(p *radius.Packet) (value HWAcctIPv6InputGigawords) {
	value, _ = HWAcctIPv6InputGigawords_Lookup(p)
	return
}

func HWAcctIPv6InputGigawords_Gets(p *radius.Packet) (values []HWAcctIPv6InputGigawords, err error) {
	var i uint32
	for _, attr := range _Huawei_GetsVendor(p, 148) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, HWAcctIPv6InputGigawords(i))
	}
	return
}

func HWAcctIPv6InputGigawords_Lookup(p *radius.Packet) (value HWAcctIPv6InputGigawords, err error) {
	a, ok := _Huawei_LookupVendor(p, 148)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = HWAcctIPv6InputGigawords(i)
	return
}

func HWAcctIPv6InputGigawords_Set(p *radius.Packet, value HWAcctIPv6InputGigawords) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Huawei_SetVendor(p, 148, a)
}

func HWAcctIPv6InputGigawords_Del(p *radius.Packet) {
	_Huawei_DelVendor(p, 148)
}

type HWAcctIPv6OutputGigawords uint32

var HWAcctIPv6OutputGigawords_Strings = map[HWAcctIPv6OutputGigawords]string{}

func (a HWAcctIPv6OutputGigawords) String() string {
	if str, ok := HWAcctIPv6OutputGigawords_Strings[a]; ok {
		return str
	}
	return "HWAcctIPv6OutputGigawords(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func HWAcctIPv6OutputGigawords_Add(p *radius.Packet, value HWAcctIPv6OutputGigawords) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Huawei_AddVendor(p, 149, a)
}

func HWAcctIPv6OutputGigawords_Get(p *radius.Packet) (value HWAcctIPv6OutputGigawords) {
	value, _ = HWAcctIPv6OutputGigawords_Lookup(p)
	return
}

func HWAcctIPv6OutputGigawords_Gets(p *radius.Packet) (values []HWAcctIPv6OutputGigawords, err error) {
	var i uint32
	for _, attr := range _Huawei_GetsVendor(p, 149) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, HWAcctIPv6OutputGigawords(i))
	}
	return
}

func HWAcctIPv6OutputGigawords_Lookup(p *radius.Packet) (value HWAcctIPv6OutputGigawords, err error) {
	a, ok := _Huawei_LookupVendor(p, 149)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = HWAcctIPv6OutputGigawords(i)
	return
}

func HWAcctIPv6OutputGigawords_Set(p *radius.Packet, value HWAcctIPv6OutputGigawords) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Huawei_SetVendor(p, 149, a)
}

func HWAcctIPv6OutputGigawords_Del(p *radius.Packet) {
	_Huawei_DelVendor(p, 149)
}

func HWDHCPv6Option37_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Huawei_AddVendor(p, 150, a)
}

func HWDHCPv6Option37_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Huawei_AddVendor(p, 150, a)
}

func HWDHCPv6Option37_Get(p *radius.Packet) (value []byte) {
	value, _ = HWDHCPv6Option37_Lookup(p)
	return
}

func HWDHCPv6Option37_GetString(p *radius.Packet) (value string) {
	value, _ = HWDHCPv6Option37_LookupString(p)
	return
}

func HWDHCPv6Option37_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Huawei_GetsVendor(p, 150) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func HWDHCPv6Option37_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Huawei_GetsVendor(p, 150) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func HWDHCPv6Option37_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Huawei_LookupVendor(p, 150)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func HWDHCPv6Option37_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Huawei_LookupVendor(p, 150)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func HWDHCPv6Option37_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Huawei_SetVendor(p, 150, a)
}

func HWDHCPv6Option37_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Huawei_SetVendor(p, 150, a)
}

func HWDHCPv6Option37_Del(p *radius.Packet) {
	_Huawei_DelVendor(p, 150)
}

func HWDHCPv6Option38_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Huawei_AddVendor(p, 151, a)
}

func HWDHCPv6Option38_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Huawei_AddVendor(p, 151, a)
}

func HWDHCPv6Option38_Get(p *radius.Packet) (value []byte) {
	value, _ = HWDHCPv6Option38_Lookup(p)
	return
}

func HWDHCPv6Option38_GetString(p *radius.Packet) (value string) {
	value, _ = HWDHCPv6Option38_LookupString(p)
	return
}

func HWDHCPv6Option38_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Huawei_GetsVendor(p, 151) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func HWDHCPv6Option38_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Huawei_GetsVendor(p, 151) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func HWDHCPv6Option38_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Huawei_LookupVendor(p, 151)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func HWDHCPv6Option38_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Huawei_LookupVendor(p, 151)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func HWDHCPv6Option38_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Huawei_SetVendor(p, 151, a)
}

func HWDHCPv6Option38_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Huawei_SetVendor(p, 151, a)
}

func HWDHCPv6Option38_Del(p *radius.Packet) {
	_Huawei_DelVendor(p, 151)
}

func HWUserMac_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Huawei_AddVendor(p, 153, a)
}

func HWUserMac_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Huawei_AddVendor(p, 153, a)
}

func HWUserMac_Get(p *radius.Packet) (value []byte) {
	value, _ = HWUserMac_Lookup(p)
	return
}

func HWUserMac_GetString(p *radius.Packet) (value string) {
	value, _ = HWUserMac_LookupString(p)
	return
}

func HWUserMac_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Huawei_GetsVendor(p, 153) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func HWUserMac_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Huawei_GetsVendor(p, 153) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func HWUserMac_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Huawei_LookupVendor(p, 153)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func HWUserMac_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Huawei_LookupVendor(p, 153)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func HWUserMac_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Huawei_SetVendor(p, 153, a)
}

func HWUserMac_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Huawei_SetVendor(p, 153, a)
}

func HWUserMac_Del(p *radius.Packet) {
	_Huawei_DelVendor(p, 153)
}

func HWDNSServerIPv6Address_Add(p *radius.Packet, value *net.IPNet) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPv6Prefix(value)
	if err != nil {
		return
	}
	return _Huawei_AddVendor(p, 154, a)
}

func HWDNSServerIPv6Address_Get(p *radius.Packet) (value *net.IPNet) {
	value, _ = HWDNSServerIPv6Address_Lookup(p)
	return
}

func HWDNSServerIPv6Address_Gets(p *radius.Packet) (values []*net.IPNet, err error) {
	var i *net.IPNet
	for _, attr := range _Huawei_GetsVendor(p, 154) {
		i, err = radius.IPv6Prefix(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func HWDNSServerIPv6Address_Lookup(p *radius.Packet) (value *net.IPNet, err error) {
	a, ok := _Huawei_LookupVendor(p, 154)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value, err = radius.IPv6Prefix(a)
	return
}

func HWDNSServerIPv6Address_Set(p *radius.Packet, value *net.IPNet) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPv6Prefix(value)
	if err != nil {
		return
	}
	return _Huawei_SetVendor(p, 154, a)
}

func HWDNSServerIPv6Address_Del(p *radius.Packet) {
	_Huawei_DelVendor(p, 154)
}

func HWDHCPv4Option121_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Huawei_AddVendor(p, 155, a)
}

func HWDHCPv4Option121_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Huawei_AddVendor(p, 155, a)
}

func HWDHCPv4Option121_Get(p *radius.Packet) (value []byte) {
	value, _ = HWDHCPv4Option121_Lookup(p)
	return
}

func HWDHCPv4Option121_GetString(p *radius.Packet) (value string) {
	value, _ = HWDHCPv4Option121_LookupString(p)
	return
}

func HWDHCPv4Option121_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Huawei_GetsVendor(p, 155) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func HWDHCPv4Option121_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Huawei_GetsVendor(p, 155) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func HWDHCPv4Option121_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Huawei_LookupVendor(p, 155)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func HWDHCPv4Option121_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Huawei_LookupVendor(p, 155)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func HWDHCPv4Option121_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Huawei_SetVendor(p, 155, a)
}

func HWDHCPv4Option121_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Huawei_SetVendor(p, 155, a)
}

func HWDHCPv4Option121_Del(p *radius.Packet) {
	_Huawei_DelVendor(p, 155)
}

func HWDHCPv4Option43_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Huawei_AddVendor(p, 156, a)
}

func HWDHCPv4Option43_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Huawei_AddVendor(p, 156, a)
}

func HWDHCPv4Option43_Get(p *radius.Packet) (value []byte) {
	value, _ = HWDHCPv4Option43_Lookup(p)
	return
}

func HWDHCPv4Option43_GetString(p *radius.Packet) (value string) {
	value, _ = HWDHCPv4Option43_LookupString(p)
	return
}

func HWDHCPv4Option43_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Huawei_GetsVendor(p, 156) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func HWDHCPv4Option43_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Huawei_GetsVendor(p, 156) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func HWDHCPv4Option43_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Huawei_LookupVendor(p, 156)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func HWDHCPv4Option43_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Huawei_LookupVendor(p, 156)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func HWDHCPv4Option43_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Huawei_SetVendor(p, 156, a)
}

func HWDHCPv4Option43_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Huawei_SetVendor(p, 156, a)
}

func HWDHCPv4Option43_Del(p *radius.Packet) {
	_Huawei_DelVendor(p, 156)
}

func HWFramedPoolGroup_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Huawei_AddVendor(p, 157, a)
}

func HWFramedPoolGroup_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Huawei_AddVendor(p, 157, a)
}

func HWFramedPoolGroup_Get(p *radius.Packet) (value []byte) {
	value, _ = HWFramedPoolGroup_Lookup(p)
	return
}

func HWFramedPoolGroup_GetString(p *radius.Packet) (value string) {
	value, _ = HWFramedPoolGroup_LookupString(p)
	return
}

func HWFramedPoolGroup_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Huawei_GetsVendor(p, 157) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func HWFramedPoolGroup_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Huawei_GetsVendor(p, 157) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func HWFramedPoolGroup_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Huawei_LookupVendor(p, 157)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func HWFramedPoolGroup_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Huawei_LookupVendor(p, 157)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func HWFramedPoolGroup_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Huawei_SetVendor(p, 157, a)
}

func HWFramedPoolGroup_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Huawei_SetVendor(p, 157, a)
}

func HWFramedPoolGroup_Del(p *radius.Packet) {
	_Huawei_DelVendor(p, 157)
}

func HWFramedIPv6Address_Add(p *radius.Packet, value *net.IPNet) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPv6Prefix(value)
	if err != nil {
		return
	}
	return _Huawei_AddVendor(p, 158, a)
}

func HWFramedIPv6Address_Get(p *radius.Packet) (value *net.IPNet) {
	value, _ = HWFramedIPv6Address_Lookup(p)
	return
}

func HWFramedIPv6Address_Gets(p *radius.Packet) (values []*net.IPNet, err error) {
	var i *net.IPNet
	for _, attr := range _Huawei_GetsVendor(p, 158) {
		i, err = radius.IPv6Prefix(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func HWFramedIPv6Address_Lookup(p *radius.Packet) (value *net.IPNet, err error) {
	a, ok := _Huawei_LookupVendor(p, 158)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value, err = radius.IPv6Prefix(a)
	return
}

func HWFramedIPv6Address_Set(p *radius.Packet, value *net.IPNet) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPv6Prefix(value)
	if err != nil {
		return
	}
	return _Huawei_SetVendor(p, 158, a)
}

func HWFramedIPv6Address_Del(p *radius.Packet) {
	_Huawei_DelVendor(p, 158)
}

type HWAcctUpdateAddress uint32

var HWAcctUpdateAddress_Strings = map[HWAcctUpdateAddress]string{}

func (a HWAcctUpdateAddress) String() string {
	if str, ok := HWAcctUpdateAddress_Strings[a]; ok {
		return str
	}
	return "HWAcctUpdateAddress(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func HWAcctUpdateAddress_Add(p *radius.Packet, value HWAcctUpdateAddress) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Huawei_AddVendor(p, 159, a)
}

func HWAcctUpdateAddress_Get(p *radius.Packet) (value HWAcctUpdateAddress) {
	value, _ = HWAcctUpdateAddress_Lookup(p)
	return
}

func HWAcctUpdateAddress_Gets(p *radius.Packet) (values []HWAcctUpdateAddress, err error) {
	var i uint32
	for _, attr := range _Huawei_GetsVendor(p, 159) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, HWAcctUpdateAddress(i))
	}
	return
}

func HWAcctUpdateAddress_Lookup(p *radius.Packet) (value HWAcctUpdateAddress, err error) {
	a, ok := _Huawei_LookupVendor(p, 159)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = HWAcctUpdateAddress(i)
	return
}

func HWAcctUpdateAddress_Set(p *radius.Packet, value HWAcctUpdateAddress) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Huawei_SetVendor(p, 159, a)
}

func HWAcctUpdateAddress_Del(p *radius.Packet) {
	_Huawei_DelVendor(p, 159)
}

func HWNATPolicyName_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Huawei_AddVendor(p, 160, a)
}

func HWNATPolicyName_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Huawei_AddVendor(p, 160, a)
}

func HWNATPolicyName_Get(p *radius.Packet) (value []byte) {
	value, _ = HWNATPolicyName_Lookup(p)
	return
}

func HWNATPolicyName_GetString(p *radius.Packet) (value string) {
	value, _ = HWNATPolicyName_LookupString(p)
	return
}

func HWNATPolicyName_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Huawei_GetsVendor(p, 160) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func HWNATPolicyName_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Huawei_GetsVendor(p, 160) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func HWNATPolicyName_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Huawei_LookupVendor(p, 160)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func HWNATPolicyName_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Huawei_LookupVendor(p, 160)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func HWNATPolicyName_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Huawei_SetVendor(p, 160, a)
}

func HWNATPolicyName_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Huawei_SetVendor(p, 160, a)
}

func HWNATPolicyName_Del(p *radius.Packet) {
	_Huawei_DelVendor(p, 160)
}

func HWNATPublicAddress_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Huawei_AddVendor(p, 161, a)
}

func HWNATPublicAddress_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Huawei_AddVendor(p, 161, a)
}

func HWNATPublicAddress_Get(p *radius.Packet) (value []byte) {
	value, _ = HWNATPublicAddress_Lookup(p)
	return
}

func HWNATPublicAddress_GetString(p *radius.Packet) (value string) {
	value, _ = HWNATPublicAddress_LookupString(p)
	return
}

func HWNATPublicAddress_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Huawei_GetsVendor(p, 161) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func HWNATPublicAddress_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Huawei_GetsVendor(p, 161) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func HWNATPublicAddress_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Huawei_LookupVendor(p, 161)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func HWNATPublicAddress_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Huawei_LookupVendor(p, 161)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func HWNATPublicAddress_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Huawei_SetVendor(p, 161, a)
}

func HWNATPublicAddress_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Huawei_SetVendor(p, 161, a)
}

func HWNATPublicAddress_Del(p *radius.Packet) {
	_Huawei_DelVendor(p, 161)
}

func HWNATStartPort_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Huawei_AddVendor(p, 162, a)
}

func HWNATStartPort_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Huawei_AddVendor(p, 162, a)
}

func HWNATStartPort_Get(p *radius.Packet) (value []byte) {
	value, _ = HWNATStartPort_Lookup(p)
	return
}

func HWNATStartPort_GetString(p *radius.Packet) (value string) {
	value, _ = HWNATStartPort_LookupString(p)
	return
}

func HWNATStartPort_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Huawei_GetsVendor(p, 162) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func HWNATStartPort_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Huawei_GetsVendor(p, 162) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func HWNATStartPort_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Huawei_LookupVendor(p, 162)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func HWNATStartPort_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Huawei_LookupVendor(p, 162)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func HWNATStartPort_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Huawei_SetVendor(p, 162, a)
}

func HWNATStartPort_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Huawei_SetVendor(p, 162, a)
}

func HWNATStartPort_Del(p *radius.Packet) {
	_Huawei_DelVendor(p, 162)
}

func HWNATEndPort_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Huawei_AddVendor(p, 163, a)
}

func HWNATEndPort_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Huawei_AddVendor(p, 163, a)
}

func HWNATEndPort_Get(p *radius.Packet) (value []byte) {
	value, _ = HWNATEndPort_Lookup(p)
	return
}

func HWNATEndPort_GetString(p *radius.Packet) (value string) {
	value, _ = HWNATEndPort_LookupString(p)
	return
}

func HWNATEndPort_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Huawei_GetsVendor(p, 163) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func HWNATEndPort_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Huawei_GetsVendor(p, 163) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func HWNATEndPort_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Huawei_LookupVendor(p, 163)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func HWNATEndPort_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Huawei_LookupVendor(p, 163)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func HWNATEndPort_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Huawei_SetVendor(p, 163, a)
}

func HWNATEndPort_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Huawei_SetVendor(p, 163, a)
}

func HWNATEndPort_Del(p *radius.Packet) {
	_Huawei_DelVendor(p, 163)
}

func HWNATPortForwarding_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Huawei_AddVendor(p, 164, a)
}

func HWNATPortForwarding_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Huawei_AddVendor(p, 164, a)
}

func HWNATPortForwarding_Get(p *radius.Packet) (value []byte) {
	value, _ = HWNATPortForwarding_Lookup(p)
	return
}

func HWNATPortForwarding_GetString(p *radius.Packet) (value string) {
	value, _ = HWNATPortForwarding_LookupString(p)
	return
}

func HWNATPortForwarding_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Huawei_GetsVendor(p, 164) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func HWNATPortForwarding_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Huawei_GetsVendor(p, 164) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func HWNATPortForwarding_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Huawei_LookupVendor(p, 164)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func HWNATPortForwarding_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Huawei_LookupVendor(p, 164)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func HWNATPortForwarding_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Huawei_SetVendor(p, 164, a)
}

func HWNATPortForwarding_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Huawei_SetVendor(p, 164, a)
}

func HWNATPortForwarding_Del(p *radius.Packet) {
	_Huawei_DelVendor(p, 164)
}

type HWNATPortRangeUpdate uint32

var HWNATPortRangeUpdate_Strings = map[HWNATPortRangeUpdate]string{}

func (a HWNATPortRangeUpdate) String() string {
	if str, ok := HWNATPortRangeUpdate_Strings[a]; ok {
		return str
	}
	return "HWNATPortRangeUpdate(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func HWNATPortRangeUpdate_Add(p *radius.Packet, value HWNATPortRangeUpdate) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Huawei_AddVendor(p, 165, a)
}

func HWNATPortRangeUpdate_Get(p *radius.Packet) (value HWNATPortRangeUpdate) {
	value, _ = HWNATPortRangeUpdate_Lookup(p)
	return
}

func HWNATPortRangeUpdate_Gets(p *radius.Packet) (values []HWNATPortRangeUpdate, err error) {
	var i uint32
	for _, attr := range _Huawei_GetsVendor(p, 165) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, HWNATPortRangeUpdate(i))
	}
	return
}

func HWNATPortRangeUpdate_Lookup(p *radius.Packet) (value HWNATPortRangeUpdate, err error) {
	a, ok := _Huawei_LookupVendor(p, 165)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = HWNATPortRangeUpdate(i)
	return
}

func HWNATPortRangeUpdate_Set(p *radius.Packet, value HWNATPortRangeUpdate) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Huawei_SetVendor(p, 165, a)
}

func HWNATPortRangeUpdate_Del(p *radius.Packet) {
	_Huawei_DelVendor(p, 165)
}

func HWDSLiteTunnelName_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Huawei_AddVendor(p, 166, a)
}

func HWDSLiteTunnelName_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Huawei_AddVendor(p, 166, a)
}

func HWDSLiteTunnelName_Get(p *radius.Packet) (value []byte) {
	value, _ = HWDSLiteTunnelName_Lookup(p)
	return
}

func HWDSLiteTunnelName_GetString(p *radius.Packet) (value string) {
	value, _ = HWDSLiteTunnelName_LookupString(p)
	return
}

func HWDSLiteTunnelName_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Huawei_GetsVendor(p, 166) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func HWDSLiteTunnelName_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Huawei_GetsVendor(p, 166) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func HWDSLiteTunnelName_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Huawei_LookupVendor(p, 166)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func HWDSLiteTunnelName_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Huawei_LookupVendor(p, 166)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func HWDSLiteTunnelName_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Huawei_SetVendor(p, 166, a)
}

func HWDSLiteTunnelName_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Huawei_SetVendor(p, 166, a)
}

func HWDSLiteTunnelName_Del(p *radius.Packet) {
	_Huawei_DelVendor(p, 166)
}

func HWPCPServerName_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Huawei_AddVendor(p, 167, a)
}

func HWPCPServerName_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Huawei_AddVendor(p, 167, a)
}

func HWPCPServerName_Get(p *radius.Packet) (value []byte) {
	value, _ = HWPCPServerName_Lookup(p)
	return
}

func HWPCPServerName_GetString(p *radius.Packet) (value string) {
	value, _ = HWPCPServerName_LookupString(p)
	return
}

func HWPCPServerName_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Huawei_GetsVendor(p, 167) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func HWPCPServerName_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Huawei_GetsVendor(p, 167) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func HWPCPServerName_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Huawei_LookupVendor(p, 167)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func HWPCPServerName_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Huawei_LookupVendor(p, 167)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func HWPCPServerName_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Huawei_SetVendor(p, 167, a)
}

func HWPCPServerName_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Huawei_SetVendor(p, 167, a)
}

func HWPCPServerName_Del(p *radius.Packet) {
	_Huawei_DelVendor(p, 167)
}

type HWPublicIPAddrState uint32

const (
	HWPublicIPAddrState_Value_Safe    HWPublicIPAddrState = 0
	HWPublicIPAddrState_Value_Warning HWPublicIPAddrState = 1
	HWPublicIPAddrState_Value_Danger  HWPublicIPAddrState = 2
)

var HWPublicIPAddrState_Strings = map[HWPublicIPAddrState]string{
	HWPublicIPAddrState_Value_Safe:    "Safe",
	HWPublicIPAddrState_Value_Warning: "Warning",
	HWPublicIPAddrState_Value_Danger:  "Danger",
}

func (a HWPublicIPAddrState) String() string {
	if str, ok := HWPublicIPAddrState_Strings[a]; ok {
		return str
	}
	return "HWPublicIPAddrState(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func HWPublicIPAddrState_Add(p *radius.Packet, value HWPublicIPAddrState) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Huawei_AddVendor(p, 168, a)
}

func HWPublicIPAddrState_Get(p *radius.Packet) (value HWPublicIPAddrState) {
	value, _ = HWPublicIPAddrState_Lookup(p)
	return
}

func HWPublicIPAddrState_Gets(p *radius.Packet) (values []HWPublicIPAddrState, err error) {
	var i uint32
	for _, attr := range _Huawei_GetsVendor(p, 168) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, HWPublicIPAddrState(i))
	}
	return
}

func HWPublicIPAddrState_Lookup(p *radius.Packet) (value HWPublicIPAddrState, err error) {
	a, ok := _Huawei_LookupVendor(p, 168)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = HWPublicIPAddrState(i)
	return
}

func HWPublicIPAddrState_Set(p *radius.Packet, value HWPublicIPAddrState) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Huawei_SetVendor(p, 168, a)
}

func HWPublicIPAddrState_Del(p *radius.Packet) {
	_Huawei_DelVendor(p, 168)
}

type HWAuthType uint32

const (
	HWAuthType_Value_PPP            HWAuthType = 1
	HWAuthType_Value_Web            HWAuthType = 2
	HWAuthType_Value_Dot1x          HWAuthType = 3
	HWAuthType_Value_Fast           HWAuthType = 4
	HWAuthType_Value_Bind           HWAuthType = 5
	HWAuthType_Value_WLAN           HWAuthType = 6
	HWAuthType_Value_Administrative HWAuthType = 7
	HWAuthType_Value_Tunnel         HWAuthType = 8
	HWAuthType_Value_MIP            HWAuthType = 9
	HWAuthType_Value_None           HWAuthType = 10
)

var HWAuthType_Strings = map[HWAuthType]string{
	HWAuthType_Value_PPP:            "PPP",
	HWAuthType_Value_Web:            "Web",
	HWAuthType_Value_Dot1x:          "Dot1x",
	HWAuthType_Value_Fast:           "Fast",
	HWAuthType_Value_Bind:           "Bind",
	HWAuthType_Value_WLAN:           "WLAN",
	HWAuthType_Value_Administrative: "Administrative",
	HWAuthType_Value_Tunnel:         "Tunnel",
	HWAuthType_Value_MIP:            "MIP",
	HWAuthType_Value_None:           "None",
}

func (a HWAuthType) String() string {
	if str, ok := HWAuthType_Strings[a]; ok {
		return str
	}
	return "HWAuthType(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func HWAuthType_Add(p *radius.Packet, value HWAuthType) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Huawei_AddVendor(p, 180, a)
}

func HWAuthType_Get(p *radius.Packet) (value HWAuthType) {
	value, _ = HWAuthType_Lookup(p)
	return
}

func HWAuthType_Gets(p *radius.Packet) (values []HWAuthType, err error) {
	var i uint32
	for _, attr := range _Huawei_GetsVendor(p, 180) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, HWAuthType(i))
	}
	return
}

func HWAuthType_Lookup(p *radius.Packet) (value HWAuthType, err error) {
	a, ok := _Huawei_LookupVendor(p, 180)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = HWAuthType(i)
	return
}

func HWAuthType_Set(p *radius.Packet, value HWAuthType) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Huawei_SetVendor(p, 180, a)
}

func HWAuthType_Del(p *radius.Packet) {
	_Huawei_DelVendor(p, 180)
}

func HWAcctTerminateSubcause_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Huawei_AddVendor(p, 181, a)
}

func HWAcctTerminateSubcause_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Huawei_AddVendor(p, 181, a)
}

func HWAcctTerminateSubcause_Get(p *radius.Packet) (value []byte) {
	value, _ = HWAcctTerminateSubcause_Lookup(p)
	return
}

func HWAcctTerminateSubcause_GetString(p *radius.Packet) (value string) {
	value, _ = HWAcctTerminateSubcause_LookupString(p)
	return
}

func HWAcctTerminateSubcause_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Huawei_GetsVendor(p, 181) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func HWAcctTerminateSubcause_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Huawei_GetsVendor(p, 181) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func HWAcctTerminateSubcause_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Huawei_LookupVendor(p, 181)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func HWAcctTerminateSubcause_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Huawei_LookupVendor(p, 181)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func HWAcctTerminateSubcause_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Huawei_SetVendor(p, 181, a)
}

func HWAcctTerminateSubcause_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Huawei_SetVendor(p, 181, a)
}

func HWAcctTerminateSubcause_Del(p *radius.Packet) {
	_Huawei_DelVendor(p, 181)
}

func HWDownQOSProfileName_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Huawei_AddVendor(p, 182, a)
}

func HWDownQOSProfileName_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Huawei_AddVendor(p, 182, a)
}

func HWDownQOSProfileName_Get(p *radius.Packet) (value []byte) {
	value, _ = HWDownQOSProfileName_Lookup(p)
	return
}

func HWDownQOSProfileName_GetString(p *radius.Packet) (value string) {
	value, _ = HWDownQOSProfileName_LookupString(p)
	return
}

func HWDownQOSProfileName_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Huawei_GetsVendor(p, 182) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func HWDownQOSProfileName_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Huawei_GetsVendor(p, 182) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func HWDownQOSProfileName_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Huawei_LookupVendor(p, 182)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func HWDownQOSProfileName_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Huawei_LookupVendor(p, 182)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func HWDownQOSProfileName_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Huawei_SetVendor(p, 182, a)
}

func HWDownQOSProfileName_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Huawei_SetVendor(p, 182, a)
}

func HWDownQOSProfileName_Del(p *radius.Packet) {
	_Huawei_DelVendor(p, 182)
}

type HWPortMirror uint32

const (
	HWPortMirror_Value_Disable        HWPortMirror = 0
	HWPortMirror_Value_UplinkEnable   HWPortMirror = 1
	HWPortMirror_Value_DownlinkEnable HWPortMirror = 2
	HWPortMirror_Value_Enable         HWPortMirror = 3
)

var HWPortMirror_Strings = map[HWPortMirror]string{
	HWPortMirror_Value_Disable:        "Disable",
	HWPortMirror_Value_UplinkEnable:   "Uplink-Enable",
	HWPortMirror_Value_DownlinkEnable: "Downlink-Enable",
	HWPortMirror_Value_Enable:         "Enable",
}

func (a HWPortMirror) String() string {
	if str, ok := HWPortMirror_Strings[a]; ok {
		return str
	}
	return "HWPortMirror(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func HWPortMirror_Add(p *radius.Packet, value HWPortMirror) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Huawei_AddVendor(p, 183, a)
}

func HWPortMirror_Get(p *radius.Packet) (value HWPortMirror) {
	value, _ = HWPortMirror_Lookup(p)
	return
}

func HWPortMirror_Gets(p *radius.Packet) (values []HWPortMirror, err error) {
	var i uint32
	for _, attr := range _Huawei_GetsVendor(p, 183) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, HWPortMirror(i))
	}
	return
}

func HWPortMirror_Lookup(p *radius.Packet) (value HWPortMirror, err error) {
	a, ok := _Huawei_LookupVendor(p, 183)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = HWPortMirror(i)
	return
}

func HWPortMirror_Set(p *radius.Packet, value HWPortMirror) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Huawei_SetVendor(p, 183, a)
}

func HWPortMirror_Del(p *radius.Packet) {
	_Huawei_DelVendor(p, 183)
}

func HWAccountInfo_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Huawei_AddVendor(p, 184, a)
}

func HWAccountInfo_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Huawei_AddVendor(p, 184, a)
}

func HWAccountInfo_Get(p *radius.Packet) (value []byte) {
	value, _ = HWAccountInfo_Lookup(p)
	return
}

func HWAccountInfo_GetString(p *radius.Packet) (value string) {
	value, _ = HWAccountInfo_LookupString(p)
	return
}

func HWAccountInfo_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Huawei_GetsVendor(p, 184) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func HWAccountInfo_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Huawei_GetsVendor(p, 184) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func HWAccountInfo_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Huawei_LookupVendor(p, 184)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func HWAccountInfo_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Huawei_LookupVendor(p, 184)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func HWAccountInfo_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Huawei_SetVendor(p, 184, a)
}

func HWAccountInfo_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Huawei_SetVendor(p, 184, a)
}

func HWAccountInfo_Del(p *radius.Packet) {
	_Huawei_DelVendor(p, 184)
}

func HWServiceInfo_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Huawei_AddVendor(p, 185, a)
}

func HWServiceInfo_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Huawei_AddVendor(p, 185, a)
}

func HWServiceInfo_Get(p *radius.Packet) (value []byte) {
	value, _ = HWServiceInfo_Lookup(p)
	return
}

func HWServiceInfo_GetString(p *radius.Packet) (value string) {
	value, _ = HWServiceInfo_LookupString(p)
	return
}

func HWServiceInfo_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Huawei_GetsVendor(p, 185) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func HWServiceInfo_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Huawei_GetsVendor(p, 185) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func HWServiceInfo_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Huawei_LookupVendor(p, 185)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func HWServiceInfo_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Huawei_LookupVendor(p, 185)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func HWServiceInfo_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Huawei_SetVendor(p, 185, a)
}

func HWServiceInfo_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Huawei_SetVendor(p, 185, a)
}

func HWServiceInfo_Del(p *radius.Packet) {
	_Huawei_DelVendor(p, 185)
}

func HWDHCPOption_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Huawei_AddVendor(p, 187, a)
}

func HWDHCPOption_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Huawei_AddVendor(p, 187, a)
}

func HWDHCPOption_Get(p *radius.Packet) (value []byte) {
	value, _ = HWDHCPOption_Lookup(p)
	return
}

func HWDHCPOption_GetString(p *radius.Packet) (value string) {
	value, _ = HWDHCPOption_LookupString(p)
	return
}

func HWDHCPOption_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Huawei_GetsVendor(p, 187) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func HWDHCPOption_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Huawei_GetsVendor(p, 187) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func HWDHCPOption_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Huawei_LookupVendor(p, 187)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func HWDHCPOption_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Huawei_LookupVendor(p, 187)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func HWDHCPOption_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Huawei_SetVendor(p, 187, a)
}

func HWDHCPOption_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Huawei_SetVendor(p, 187, a)
}

func HWDHCPOption_Del(p *radius.Packet) {
	_Huawei_DelVendor(p, 187)
}

func HWAVpair_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Huawei_AddVendor(p, 188, a)
}

func HWAVpair_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Huawei_AddVendor(p, 188, a)
}

func HWAVpair_Get(p *radius.Packet) (value []byte) {
	value, _ = HWAVpair_Lookup(p)
	return
}

func HWAVpair_GetString(p *radius.Packet) (value string) {
	value, _ = HWAVpair_LookupString(p)
	return
}

func HWAVpair_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Huawei_GetsVendor(p, 188) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func HWAVpair_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Huawei_GetsVendor(p, 188) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func HWAVpair_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Huawei_LookupVendor(p, 188)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func HWAVpair_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Huawei_LookupVendor(p, 188)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func HWAVpair_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Huawei_SetVendor(p, 188, a)
}

func HWAVpair_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Huawei_SetVendor(p, 188, a)
}

func HWAVpair_Del(p *radius.Packet) {
	_Huawei_DelVendor(p, 188)
}

func HWDelegatedIPv6PrefixPool_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Huawei_AddVendor(p, 191, a)
}

func HWDelegatedIPv6PrefixPool_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Huawei_AddVendor(p, 191, a)
}

func HWDelegatedIPv6PrefixPool_Get(p *radius.Packet) (value []byte) {
	value, _ = HWDelegatedIPv6PrefixPool_Lookup(p)
	return
}

func HWDelegatedIPv6PrefixPool_GetString(p *radius.Packet) (value string) {
	value, _ = HWDelegatedIPv6PrefixPool_LookupString(p)
	return
}

func HWDelegatedIPv6PrefixPool_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Huawei_GetsVendor(p, 191) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func HWDelegatedIPv6PrefixPool_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Huawei_GetsVendor(p, 191) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func HWDelegatedIPv6PrefixPool_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Huawei_LookupVendor(p, 191)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func HWDelegatedIPv6PrefixPool_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Huawei_LookupVendor(p, 191)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func HWDelegatedIPv6PrefixPool_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Huawei_SetVendor(p, 191, a)
}

func HWDelegatedIPv6PrefixPool_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Huawei_SetVendor(p, 191, a)
}

func HWDelegatedIPv6PrefixPool_Del(p *radius.Packet) {
	_Huawei_DelVendor(p, 191)
}

func HWIPv6PrefixLease_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Huawei_AddVendor(p, 192, a)
}

func HWIPv6PrefixLease_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Huawei_AddVendor(p, 192, a)
}

func HWIPv6PrefixLease_Get(p *radius.Packet) (value []byte) {
	value, _ = HWIPv6PrefixLease_Lookup(p)
	return
}

func HWIPv6PrefixLease_GetString(p *radius.Packet) (value string) {
	value, _ = HWIPv6PrefixLease_LookupString(p)
	return
}

func HWIPv6PrefixLease_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Huawei_GetsVendor(p, 192) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func HWIPv6PrefixLease_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Huawei_GetsVendor(p, 192) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func HWIPv6PrefixLease_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Huawei_LookupVendor(p, 192)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func HWIPv6PrefixLease_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Huawei_LookupVendor(p, 192)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func HWIPv6PrefixLease_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Huawei_SetVendor(p, 192, a)
}

func HWIPv6PrefixLease_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Huawei_SetVendor(p, 192, a)
}

func HWIPv6PrefixLease_Del(p *radius.Packet) {
	_Huawei_DelVendor(p, 192)
}

func HWIPv6AddressLease_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Huawei_AddVendor(p, 193, a)
}

func HWIPv6AddressLease_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Huawei_AddVendor(p, 193, a)
}

func HWIPv6AddressLease_Get(p *radius.Packet) (value []byte) {
	value, _ = HWIPv6AddressLease_Lookup(p)
	return
}

func HWIPv6AddressLease_GetString(p *radius.Packet) (value string) {
	value, _ = HWIPv6AddressLease_LookupString(p)
	return
}

func HWIPv6AddressLease_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Huawei_GetsVendor(p, 193) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func HWIPv6AddressLease_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Huawei_GetsVendor(p, 193) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func HWIPv6AddressLease_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Huawei_LookupVendor(p, 193)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func HWIPv6AddressLease_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Huawei_LookupVendor(p, 193)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func HWIPv6AddressLease_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Huawei_SetVendor(p, 193, a)
}

func HWIPv6AddressLease_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Huawei_SetVendor(p, 193, a)
}

func HWIPv6AddressLease_Del(p *radius.Packet) {
	_Huawei_DelVendor(p, 193)
}

func HWIPv6PolicyRoute_Add(p *radius.Packet, value *net.IPNet) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPv6Prefix(value)
	if err != nil {
		return
	}
	return _Huawei_AddVendor(p, 194, a)
}

func HWIPv6PolicyRoute_Get(p *radius.Packet) (value *net.IPNet) {
	value, _ = HWIPv6PolicyRoute_Lookup(p)
	return
}

func HWIPv6PolicyRoute_Gets(p *radius.Packet) (values []*net.IPNet, err error) {
	var i *net.IPNet
	for _, attr := range _Huawei_GetsVendor(p, 194) {
		i, err = radius.IPv6Prefix(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func HWIPv6PolicyRoute_Lookup(p *radius.Packet) (value *net.IPNet, err error) {
	a, ok := _Huawei_LookupVendor(p, 194)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value, err = radius.IPv6Prefix(a)
	return
}

func HWIPv6PolicyRoute_Set(p *radius.Packet, value *net.IPNet) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPv6Prefix(value)
	if err != nil {
		return
	}
	return _Huawei_SetVendor(p, 194, a)
}

func HWIPv6PolicyRoute_Del(p *radius.Packet) {
	_Huawei_DelVendor(p, 194)
}

type HWMNGIPv6 uint32

const (
	HWMNGIPv6_Value_Unsupported HWMNGIPv6 = 0
	HWMNGIPv6_Value_Supported   HWMNGIPv6 = 1
)

var HWMNGIPv6_Strings = map[HWMNGIPv6]string{
	HWMNGIPv6_Value_Unsupported: "Unsupported",
	HWMNGIPv6_Value_Supported:   "Supported",
}

func (a HWMNGIPv6) String() string {
	if str, ok := HWMNGIPv6_Strings[a]; ok {
		return str
	}
	return "HWMNGIPv6(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func HWMNGIPv6_Add(p *radius.Packet, value HWMNGIPv6) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Huawei_AddVendor(p, 196, a)
}

func HWMNGIPv6_Get(p *radius.Packet) (value HWMNGIPv6) {
	value, _ = HWMNGIPv6_Lookup(p)
	return
}

func HWMNGIPv6_Gets(p *radius.Packet) (values []HWMNGIPv6, err error) {
	var i uint32
	for _, attr := range _Huawei_GetsVendor(p, 196) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, HWMNGIPv6(i))
	}
	return
}

func HWMNGIPv6_Lookup(p *radius.Packet) (value HWMNGIPv6, err error) {
	a, ok := _Huawei_LookupVendor(p, 196)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = HWMNGIPv6(i)
	return
}

func HWMNGIPv6_Set(p *radius.Packet, value HWMNGIPv6) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Huawei_SetVendor(p, 196, a)
}

func HWMNGIPv6_Del(p *radius.Packet) {
	_Huawei_DelVendor(p, 196)
}

func HWFlowInfo_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Huawei_AddVendor(p, 211, a)
}

func HWFlowInfo_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Huawei_AddVendor(p, 211, a)
}

func HWFlowInfo_Get(p *radius.Packet) (value []byte) {
	value, _ = HWFlowInfo_Lookup(p)
	return
}

func HWFlowInfo_GetString(p *radius.Packet) (value string) {
	value, _ = HWFlowInfo_LookupString(p)
	return
}

func HWFlowInfo_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Huawei_GetsVendor(p, 211) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func HWFlowInfo_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Huawei_GetsVendor(p, 211) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func HWFlowInfo_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Huawei_LookupVendor(p, 211)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func HWFlowInfo_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Huawei_LookupVendor(p, 211)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func HWFlowInfo_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Huawei_SetVendor(p, 211, a)
}

func HWFlowInfo_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Huawei_SetVendor(p, 211, a)
}

func HWFlowInfo_Del(p *radius.Packet) {
	_Huawei_DelVendor(p, 211)
}

type HWFlowID uint32

var HWFlowID_Strings = map[HWFlowID]string{}

func (a HWFlowID) String() string {
	if str, ok := HWFlowID_Strings[a]; ok {
		return str
	}
	return "HWFlowID(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func HWFlowID_Add(p *radius.Packet, value HWFlowID) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Huawei_AddVendor(p, 212, a)
}

func HWFlowID_Get(p *radius.Packet) (value HWFlowID) {
	value, _ = HWFlowID_Lookup(p)
	return
}

func HWFlowID_Gets(p *radius.Packet) (values []HWFlowID, err error) {
	var i uint32
	for _, attr := range _Huawei_GetsVendor(p, 212) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, HWFlowID(i))
	}
	return
}

func HWFlowID_Lookup(p *radius.Packet) (value HWFlowID, err error) {
	a, ok := _Huawei_LookupVendor(p, 212)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = HWFlowID(i)
	return
}

func HWFlowID_Set(p *radius.Packet, value HWFlowID) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Huawei_SetVendor(p, 212, a)
}

func HWFlowID_Del(p *radius.Packet) {
	_Huawei_DelVendor(p, 212)
}

func HWDHCPServerIP_Add(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPAddr(value)
	if err != nil {
		return
	}
	return _Huawei_AddVendor(p, 214, a)
}

func HWDHCPServerIP_Get(p *radius.Packet) (value net.IP) {
	value, _ = HWDHCPServerIP_Lookup(p)
	return
}

func HWDHCPServerIP_Gets(p *radius.Packet) (values []net.IP, err error) {
	var i net.IP
	for _, attr := range _Huawei_GetsVendor(p, 214) {
		i, err = radius.IPAddr(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func HWDHCPServerIP_Lookup(p *radius.Packet) (value net.IP, err error) {
	a, ok := _Huawei_LookupVendor(p, 214)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value, err = radius.IPAddr(a)
	return
}

func HWDHCPServerIP_Set(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPAddr(value)
	if err != nil {
		return
	}
	return _Huawei_SetVendor(p, 214, a)
}

func HWDHCPServerIP_Del(p *radius.Packet) {
	_Huawei_DelVendor(p, 214)
}

type HWApplicationType uint32

const (
	HWApplicationType_Value_Fixed        HWApplicationType = 1
	HWApplicationType_Value_Nomadic      HWApplicationType = 2
	HWApplicationType_Value_Portable     HWApplicationType = 3
	HWApplicationType_Value_SimpleMobile HWApplicationType = 4
	HWApplicationType_Value_FullMobile   HWApplicationType = 5
)

var HWApplicationType_Strings = map[HWApplicationType]string{
	HWApplicationType_Value_Fixed:        "Fixed",
	HWApplicationType_Value_Nomadic:      "Nomadic",
	HWApplicationType_Value_Portable:     "Portable",
	HWApplicationType_Value_SimpleMobile: "Simple-Mobile",
	HWApplicationType_Value_FullMobile:   "Full-Mobile",
}

func (a HWApplicationType) String() string {
	if str, ok := HWApplicationType_Strings[a]; ok {
		return str
	}
	return "HWApplicationType(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func HWApplicationType_Add(p *radius.Packet, value HWApplicationType) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Huawei_AddVendor(p, 215, a)
}

func HWApplicationType_Get(p *radius.Packet) (value HWApplicationType) {
	value, _ = HWApplicationType_Lookup(p)
	return
}

func HWApplicationType_Gets(p *radius.Packet) (values []HWApplicationType, err error) {
	var i uint32
	for _, attr := range _Huawei_GetsVendor(p, 215) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, HWApplicationType(i))
	}
	return
}

func HWApplicationType_Lookup(p *radius.Packet) (value HWApplicationType, err error) {
	a, ok := _Huawei_LookupVendor(p, 215)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = HWApplicationType(i)
	return
}

func HWApplicationType_Set(p *radius.Packet, value HWApplicationType) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Huawei_SetVendor(p, 215, a)
}

func HWApplicationType_Del(p *radius.Packet) {
	_Huawei_DelVendor(p, 215)
}

func HWIndicationFlag_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Huawei_AddVendor(p, 216, a)
}

func HWIndicationFlag_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Huawei_AddVendor(p, 216, a)
}

func HWIndicationFlag_Get(p *radius.Packet) (value []byte) {
	value, _ = HWIndicationFlag_Lookup(p)
	return
}

func HWIndicationFlag_GetString(p *radius.Packet) (value string) {
	value, _ = HWIndicationFlag_LookupString(p)
	return
}

func HWIndicationFlag_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Huawei_GetsVendor(p, 216) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func HWIndicationFlag_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Huawei_GetsVendor(p, 216) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func HWIndicationFlag_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Huawei_LookupVendor(p, 216)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func HWIndicationFlag_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Huawei_LookupVendor(p, 216)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func HWIndicationFlag_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Huawei_SetVendor(p, 216, a)
}

func HWIndicationFlag_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Huawei_SetVendor(p, 216, a)
}

func HWIndicationFlag_Del(p *radius.Packet) {
	_Huawei_DelVendor(p, 216)
}

func HWOriginalNASIPAddress_Add(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPAddr(value)
	if err != nil {
		return
	}
	return _Huawei_AddVendor(p, 217, a)
}

func HWOriginalNASIPAddress_Get(p *radius.Packet) (value net.IP) {
	value, _ = HWOriginalNASIPAddress_Lookup(p)
	return
}

func HWOriginalNASIPAddress_Gets(p *radius.Packet) (values []net.IP, err error) {
	var i net.IP
	for _, attr := range _Huawei_GetsVendor(p, 217) {
		i, err = radius.IPAddr(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func HWOriginalNASIPAddress_Lookup(p *radius.Packet) (value net.IP, err error) {
	a, ok := _Huawei_LookupVendor(p, 217)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value, err = radius.IPAddr(a)
	return
}

func HWOriginalNASIPAddress_Set(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPAddr(value)
	if err != nil {
		return
	}
	return _Huawei_SetVendor(p, 217, a)
}

func HWOriginalNASIPAddress_Del(p *radius.Packet) {
	_Huawei_DelVendor(p, 217)
}

type HWUserPriority uint32

const (
	HWUserPriority_Value_Common HWUserPriority = 0
	HWUserPriority_Value_Copper HWUserPriority = 1
	HWUserPriority_Value_Silver HWUserPriority = 2
	HWUserPriority_Value_Gold   HWUserPriority = 3
)

var HWUserPriority_Strings = map[HWUserPriority]string{
	HWUserPriority_Value_Common: "Common",
	HWUserPriority_Value_Copper: "Copper",
	HWUserPriority_Value_Silver: "Silver",
	HWUserPriority_Value_Gold:   "Gold",
}

func (a HWUserPriority) String() string {
	if str, ok := HWUserPriority_Strings[a]; ok {
		return str
	}
	return "HWUserPriority(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func HWUserPriority_Add(p *radius.Packet, value HWUserPriority) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Huawei_AddVendor(p, 218, a)
}

func HWUserPriority_Get(p *radius.Packet) (value HWUserPriority) {
	value, _ = HWUserPriority_Lookup(p)
	return
}

func HWUserPriority_Gets(p *radius.Packet) (values []HWUserPriority, err error) {
	var i uint32
	for _, attr := range _Huawei_GetsVendor(p, 218) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, HWUserPriority(i))
	}
	return
}

func HWUserPriority_Lookup(p *radius.Packet) (value HWUserPriority, err error) {
	a, ok := _Huawei_LookupVendor(p, 218)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = HWUserPriority(i)
	return
}

func HWUserPriority_Set(p *radius.Packet, value HWUserPriority) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Huawei_SetVendor(p, 218, a)
}

func HWUserPriority_Del(p *radius.Packet) {
	_Huawei_DelVendor(p, 218)
}

func HWACSURL_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Huawei_AddVendor(p, 219, a)
}

func HWACSURL_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Huawei_AddVendor(p, 219, a)
}

func HWACSURL_Get(p *radius.Packet) (value []byte) {
	value, _ = HWACSURL_Lookup(p)
	return
}

func HWACSURL_GetString(p *radius.Packet) (value string) {
	value, _ = HWACSURL_LookupString(p)
	return
}

func HWACSURL_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Huawei_GetsVendor(p, 219) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func HWACSURL_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Huawei_GetsVendor(p, 219) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func HWACSURL_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Huawei_LookupVendor(p, 219)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func HWACSURL_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Huawei_LookupVendor(p, 219)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func HWACSURL_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Huawei_SetVendor(p, 219, a)
}

func HWACSURL_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Huawei_SetVendor(p, 219, a)
}

func HWACSURL_Del(p *radius.Packet) {
	_Huawei_DelVendor(p, 219)
}

func HWProvisionCode_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Huawei_AddVendor(p, 220, a)
}

func HWProvisionCode_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Huawei_AddVendor(p, 220, a)
}

func HWProvisionCode_Get(p *radius.Packet) (value []byte) {
	value, _ = HWProvisionCode_Lookup(p)
	return
}

func HWProvisionCode_GetString(p *radius.Packet) (value string) {
	value, _ = HWProvisionCode_LookupString(p)
	return
}

func HWProvisionCode_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Huawei_GetsVendor(p, 220) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func HWProvisionCode_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Huawei_GetsVendor(p, 220) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func HWProvisionCode_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Huawei_LookupVendor(p, 220)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func HWProvisionCode_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Huawei_LookupVendor(p, 220)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func HWProvisionCode_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Huawei_SetVendor(p, 220, a)
}

func HWProvisionCode_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Huawei_SetVendor(p, 220, a)
}

func HWProvisionCode_Del(p *radius.Packet) {
	_Huawei_DelVendor(p, 220)
}

func HWApplicationScene_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Huawei_AddVendor(p, 221, a)
}

func HWApplicationScene_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Huawei_AddVendor(p, 221, a)
}

func HWApplicationScene_Get(p *radius.Packet) (value []byte) {
	value, _ = HWApplicationScene_Lookup(p)
	return
}

func HWApplicationScene_GetString(p *radius.Packet) (value string) {
	value, _ = HWApplicationScene_LookupString(p)
	return
}

func HWApplicationScene_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Huawei_GetsVendor(p, 221) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func HWApplicationScene_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Huawei_GetsVendor(p, 221) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func HWApplicationScene_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Huawei_LookupVendor(p, 221)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func HWApplicationScene_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Huawei_LookupVendor(p, 221)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func HWApplicationScene_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Huawei_SetVendor(p, 221, a)
}

func HWApplicationScene_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Huawei_SetVendor(p, 221, a)
}

func HWApplicationScene_Del(p *radius.Packet) {
	_Huawei_DelVendor(p, 221)
}

func HWMSMaximumMACStudyNumber_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Huawei_AddVendor(p, 222, a)
}

func HWMSMaximumMACStudyNumber_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Huawei_AddVendor(p, 222, a)
}

func HWMSMaximumMACStudyNumber_Get(p *radius.Packet) (value []byte) {
	value, _ = HWMSMaximumMACStudyNumber_Lookup(p)
	return
}

func HWMSMaximumMACStudyNumber_GetString(p *radius.Packet) (value string) {
	value, _ = HWMSMaximumMACStudyNumber_LookupString(p)
	return
}

func HWMSMaximumMACStudyNumber_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Huawei_GetsVendor(p, 222) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func HWMSMaximumMACStudyNumber_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Huawei_GetsVendor(p, 222) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func HWMSMaximumMACStudyNumber_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Huawei_LookupVendor(p, 222)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func HWMSMaximumMACStudyNumber_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Huawei_LookupVendor(p, 222)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func HWMSMaximumMACStudyNumber_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Huawei_SetVendor(p, 222, a)
}

func HWMSMaximumMACStudyNumber_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Huawei_SetVendor(p, 222, a)
}

func HWMSMaximumMACStudyNumber_Del(p *radius.Packet) {
	_Huawei_DelVendor(p, 222)
}

func HWGGSNVendor_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Huawei_AddVendor(p, 232, a)
}

func HWGGSNVendor_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Huawei_AddVendor(p, 232, a)
}

func HWGGSNVendor_Get(p *radius.Packet) (value []byte) {
	value, _ = HWGGSNVendor_Lookup(p)
	return
}

func HWGGSNVendor_GetString(p *radius.Packet) (value string) {
	value, _ = HWGGSNVendor_LookupString(p)
	return
}

func HWGGSNVendor_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Huawei_GetsVendor(p, 232) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func HWGGSNVendor_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Huawei_GetsVendor(p, 232) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func HWGGSNVendor_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Huawei_LookupVendor(p, 232)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func HWGGSNVendor_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Huawei_LookupVendor(p, 232)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func HWGGSNVendor_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Huawei_SetVendor(p, 232, a)
}

func HWGGSNVendor_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Huawei_SetVendor(p, 232, a)
}

func HWGGSNVendor_Del(p *radius.Packet) {
	_Huawei_DelVendor(p, 232)
}

func HWGGSNVersion_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Huawei_AddVendor(p, 233, a)
}

func HWGGSNVersion_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Huawei_AddVendor(p, 233, a)
}

func HWGGSNVersion_Get(p *radius.Packet) (value []byte) {
	value, _ = HWGGSNVersion_Lookup(p)
	return
}

func HWGGSNVersion_GetString(p *radius.Packet) (value string) {
	value, _ = HWGGSNVersion_LookupString(p)
	return
}

func HWGGSNVersion_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Huawei_GetsVendor(p, 233) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func HWGGSNVersion_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Huawei_GetsVendor(p, 233) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func HWGGSNVersion_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Huawei_LookupVendor(p, 233)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func HWGGSNVersion_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Huawei_LookupVendor(p, 233)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func HWGGSNVersion_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Huawei_SetVendor(p, 233, a)
}

func HWGGSNVersion_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Huawei_SetVendor(p, 233, a)
}

func HWGGSNVersion_Del(p *radius.Packet) {
	_Huawei_DelVendor(p, 233)
}

func HWWebURL_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Huawei_AddVendor(p, 253, a)
}

func HWWebURL_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Huawei_AddVendor(p, 253, a)
}

func HWWebURL_Get(p *radius.Packet) (value []byte) {
	value, _ = HWWebURL_Lookup(p)
	return
}

func HWWebURL_GetString(p *radius.Packet) (value string) {
	value, _ = HWWebURL_LookupString(p)
	return
}

func HWWebURL_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Huawei_GetsVendor(p, 253) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func HWWebURL_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Huawei_GetsVendor(p, 253) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func HWWebURL_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Huawei_LookupVendor(p, 253)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func HWWebURL_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Huawei_LookupVendor(p, 253)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func HWWebURL_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Huawei_SetVendor(p, 253, a)
}

func HWWebURL_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Huawei_SetVendor(p, 253, a)
}

func HWWebURL_Del(p *radius.Packet) {
	_Huawei_DelVendor(p, 253)
}

func HWVersion_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Huawei_AddVendor(p, 254, a)
}

func HWVersion_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Huawei_AddVendor(p, 254, a)
}

func HWVersion_Get(p *radius.Packet) (value []byte) {
	value, _ = HWVersion_Lookup(p)
	return
}

func HWVersion_GetString(p *radius.Packet) (value string) {
	value, _ = HWVersion_LookupString(p)
	return
}

func HWVersion_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Huawei_GetsVendor(p, 254) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func HWVersion_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Huawei_GetsVendor(p, 254) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func HWVersion_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Huawei_LookupVendor(p, 254)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func HWVersion_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Huawei_LookupVendor(p, 254)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func HWVersion_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Huawei_SetVendor(p, 254, a)
}

func HWVersion_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Huawei_SetVendor(p, 254, a)
}

func HWVersion_Del(p *radius.Packet) {
	_Huawei_DelVendor(p, 254)
}

func HWProductID_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Huawei_AddVendor(p, 255, a)
}

func HWProductID_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Huawei_AddVendor(p, 255, a)
}

func HWProductID_Get(p *radius.Packet) (value []byte) {
	value, _ = HWProductID_Lookup(p)
	return
}

func HWProductID_GetString(p *radius.Packet) (value string) {
	value, _ = HWProductID_LookupString(p)
	return
}

func HWProductID_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Huawei_GetsVendor(p, 255) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func HWProductID_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Huawei_GetsVendor(p, 255) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func HWProductID_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Huawei_LookupVendor(p, 255)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func HWProductID_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Huawei_LookupVendor(p, 255)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func HWProductID_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Huawei_SetVendor(p, 255, a)
}

func HWProductID_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Huawei_SetVendor(p, 255, a)
}

func HWProductID_Del(p *radius.Packet) {
	_Huawei_DelVendor(p, 255)
}
